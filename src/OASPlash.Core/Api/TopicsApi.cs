/*
 * Unsplash API
 *
 * This document describes the resources that make up the official Unsplash JSON API. 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using OASPlash.Core.Client;
using OASPlash.Core.Model;

namespace OASPlash.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITopicsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a topic&#39;s photos
        /// </summary>
        /// <remarks>
        /// Retrieve a topic&#39;s photos.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrSlug">The topics&#39;s ID or slug.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. (Optional; Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <returns>List&lt;Photo&gt;</returns>
        List<Photo> GetTopicPhotos(string idOrSlug, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?), OrderBy? orderBy = default(OrderBy?));

        /// <summary>
        /// Get a topic&#39;s photos
        /// </summary>
        /// <remarks>
        /// Retrieve a topic&#39;s photos.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrSlug">The topics&#39;s ID or slug.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. (Optional; Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Photo&gt;</returns>
        ApiResponse<List<Photo>> GetTopicPhotosWithHttpInfo(string idOrSlug, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?), OrderBy? orderBy = default(OrderBy?));
        /// <summary>
        /// List topics
        /// </summary>
        /// <remarks>
        /// Get a single page from the list of all topics.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Limit to only matching topic ids or slugs. (Optional; Comma separated string) (optional)</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: featured, latest, oldest, position; default: position)  (optional)</param>
        /// <returns>List&lt;Topic&gt;</returns>
        List<Topic> ListTopics(string ids = default(string), int? page = default(int?), int? perPage = default(int?), TopicsOrderBy? orderBy = default(TopicsOrderBy?));

        /// <summary>
        /// List topics
        /// </summary>
        /// <remarks>
        /// Get a single page from the list of all topics.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Limit to only matching topic ids or slugs. (Optional; Comma separated string) (optional)</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: featured, latest, oldest, position; default: position)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Topic&gt;</returns>
        ApiResponse<List<Topic>> ListTopicsWithHttpInfo(string ids = default(string), int? page = default(int?), int? perPage = default(int?), TopicsOrderBy? orderBy = default(TopicsOrderBy?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITopicsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a topic&#39;s photos
        /// </summary>
        /// <remarks>
        /// Retrieve a topic&#39;s photos.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrSlug">The topics&#39;s ID or slug.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. (Optional; Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Photo&gt;</returns>
        System.Threading.Tasks.Task<List<Photo>> GetTopicPhotosAsync(string idOrSlug, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?), OrderBy? orderBy = default(OrderBy?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a topic&#39;s photos
        /// </summary>
        /// <remarks>
        /// Retrieve a topic&#39;s photos.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrSlug">The topics&#39;s ID or slug.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. (Optional; Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Photo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Photo>>> GetTopicPhotosWithHttpInfoAsync(string idOrSlug, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?), OrderBy? orderBy = default(OrderBy?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List topics
        /// </summary>
        /// <remarks>
        /// Get a single page from the list of all topics.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Limit to only matching topic ids or slugs. (Optional; Comma separated string) (optional)</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: featured, latest, oldest, position; default: position)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Topic&gt;</returns>
        System.Threading.Tasks.Task<List<Topic>> ListTopicsAsync(string ids = default(string), int? page = default(int?), int? perPage = default(int?), TopicsOrderBy? orderBy = default(TopicsOrderBy?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List topics
        /// </summary>
        /// <remarks>
        /// Get a single page from the list of all topics.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Limit to only matching topic ids or slugs. (Optional; Comma separated string) (optional)</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: featured, latest, oldest, position; default: position)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Topic&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Topic>>> ListTopicsWithHttpInfoAsync(string ids = default(string), int? page = default(int?), int? perPage = default(int?), TopicsOrderBy? orderBy = default(TopicsOrderBy?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITopicsApi : ITopicsApiSync, ITopicsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TopicsApi : IDisposable, ITopicsApi
    {
        private OASPlash.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TopicsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public TopicsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TopicsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public TopicsApi(string basePath)
        {
            this.Configuration = OASPlash.Core.Client.Configuration.MergeConfigurations(
                OASPlash.Core.Client.GlobalConfiguration.Instance,
                new OASPlash.Core.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new OASPlash.Core.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TopicsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public TopicsApi(OASPlash.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OASPlash.Core.Client.Configuration.MergeConfigurations(
                OASPlash.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new OASPlash.Core.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TopicsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TopicsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TopicsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TopicsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = OASPlash.Core.Client.Configuration.MergeConfigurations(
                OASPlash.Core.Client.GlobalConfiguration.Instance,
                new OASPlash.Core.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new OASPlash.Core.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TopicsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TopicsApi(HttpClient client, OASPlash.Core.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = OASPlash.Core.Client.Configuration.MergeConfigurations(
                OASPlash.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new OASPlash.Core.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TopicsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public TopicsApi(OASPlash.Core.Client.ISynchronousClient client, OASPlash.Core.Client.IAsynchronousClient asyncClient, OASPlash.Core.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public OASPlash.Core.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OASPlash.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OASPlash.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OASPlash.Core.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OASPlash.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a topic&#39;s photos Retrieve a topic&#39;s photos.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrSlug">The topics&#39;s ID or slug.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. (Optional; Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <returns>List&lt;Photo&gt;</returns>
        public List<Photo> GetTopicPhotos(string idOrSlug, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?), OrderBy? orderBy = default(OrderBy?))
        {
            OASPlash.Core.Client.ApiResponse<List<Photo>> localVarResponse = GetTopicPhotosWithHttpInfo(idOrSlug, page, perPage, orientation, orderBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a topic&#39;s photos Retrieve a topic&#39;s photos.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrSlug">The topics&#39;s ID or slug.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. (Optional; Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Photo&gt;</returns>
        public OASPlash.Core.Client.ApiResponse<List<Photo>> GetTopicPhotosWithHttpInfo(string idOrSlug, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?), OrderBy? orderBy = default(OrderBy?))
        {
            // verify the required parameter 'idOrSlug' is set
            if (idOrSlug == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'idOrSlug' when calling TopicsApi->GetTopicPhotos");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id_or_slug", OASPlash.Core.Client.ClientUtils.ParameterToString(idOrSlug)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (orientation != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "orientation", orientation));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Photo>>("/topics/{id_or_slug}/photos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTopicPhotos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a topic&#39;s photos Retrieve a topic&#39;s photos.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrSlug">The topics&#39;s ID or slug.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. (Optional; Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Photo&gt;</returns>
        public async System.Threading.Tasks.Task<List<Photo>> GetTopicPhotosAsync(string idOrSlug, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?), OrderBy? orderBy = default(OrderBy?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<List<Photo>> localVarResponse = await GetTopicPhotosWithHttpInfoAsync(idOrSlug, page, perPage, orientation, orderBy, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a topic&#39;s photos Retrieve a topic&#39;s photos.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrSlug">The topics&#39;s ID or slug.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. (Optional; Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Photo&gt;)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<List<Photo>>> GetTopicPhotosWithHttpInfoAsync(string idOrSlug, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?), OrderBy? orderBy = default(OrderBy?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idOrSlug' is set
            if (idOrSlug == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'idOrSlug' when calling TopicsApi->GetTopicPhotos");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id_or_slug", OASPlash.Core.Client.ClientUtils.ParameterToString(idOrSlug)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (orientation != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "orientation", orientation));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Photo>>("/topics/{id_or_slug}/photos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTopicPhotos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List topics Get a single page from the list of all topics.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Limit to only matching topic ids or slugs. (Optional; Comma separated string) (optional)</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: featured, latest, oldest, position; default: position)  (optional)</param>
        /// <returns>List&lt;Topic&gt;</returns>
        public List<Topic> ListTopics(string ids = default(string), int? page = default(int?), int? perPage = default(int?), TopicsOrderBy? orderBy = default(TopicsOrderBy?))
        {
            OASPlash.Core.Client.ApiResponse<List<Topic>> localVarResponse = ListTopicsWithHttpInfo(ids, page, perPage, orderBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List topics Get a single page from the list of all topics.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Limit to only matching topic ids or slugs. (Optional; Comma separated string) (optional)</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: featured, latest, oldest, position; default: position)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Topic&gt;</returns>
        public OASPlash.Core.Client.ApiResponse<List<Topic>> ListTopicsWithHttpInfo(string ids = default(string), int? page = default(int?), int? perPage = default(int?), TopicsOrderBy? orderBy = default(TopicsOrderBy?))
        {
            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Topic>>("/topics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTopics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List topics Get a single page from the list of all topics.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Limit to only matching topic ids or slugs. (Optional; Comma separated string) (optional)</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: featured, latest, oldest, position; default: position)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Topic&gt;</returns>
        public async System.Threading.Tasks.Task<List<Topic>> ListTopicsAsync(string ids = default(string), int? page = default(int?), int? perPage = default(int?), TopicsOrderBy? orderBy = default(TopicsOrderBy?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<List<Topic>> localVarResponse = await ListTopicsWithHttpInfoAsync(ids, page, perPage, orderBy, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List topics Get a single page from the list of all topics.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Limit to only matching topic ids or slugs. (Optional; Comma separated string) (optional)</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: featured, latest, oldest, position; default: position)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Topic&gt;)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<List<Topic>>> ListTopicsWithHttpInfoAsync(string ids = default(string), int? page = default(int?), int? perPage = default(int?), TopicsOrderBy? orderBy = default(TopicsOrderBy?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Topic>>("/topics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTopics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
