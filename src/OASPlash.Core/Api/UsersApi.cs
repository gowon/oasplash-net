/*
 * Unsplash API
 *
 * This document describes the resources that make up the official Unsplash JSON API. 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using OASPlash.Core.Client;
using OASPlash.Core.Model;

namespace OASPlash.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a user&#39;s public profile
        /// </summary>
        /// <remarks>
        /// Retrieve public details on a given user.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <returns>User</returns>
        User GetUser(string username);

        /// <summary>
        /// Get a user&#39;s public profile
        /// </summary>
        /// <remarks>
        /// Retrieve public details on a given user.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo(string username);
        /// <summary>
        /// List a user&#39;s collections
        /// </summary>
        /// <remarks>
        /// Get a list of collections created by the user.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <returns>List&lt;Collection&gt;</returns>
        List<Collection> GetUserCollections(string username, int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// List a user&#39;s collections
        /// </summary>
        /// <remarks>
        /// Get a list of collections created by the user.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        ApiResponse<List<Collection>> GetUserCollectionsWithHttpInfo(string username, int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// List a user&#39;s liked photos
        /// </summary>
        /// <remarks>
        /// Get a list of photos liked by a user.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username. </param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <returns>List&lt;Photo&gt;</returns>
        List<Photo> GetUserLikedPhotos(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), Orientation? orientation = default(Orientation?));

        /// <summary>
        /// List a user&#39;s liked photos
        /// </summary>
        /// <remarks>
        /// Get a list of photos liked by a user.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username. </param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Photo&gt;</returns>
        ApiResponse<List<Photo>> GetUserLikedPhotosWithHttpInfo(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), Orientation? orientation = default(Orientation?));
        /// <summary>
        /// List a user&#39;s photos
        /// </summary>
        /// <remarks>
        /// Get a list of photos uploaded by a user.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="stats">Show the stats for each user&#39;s photo. (Optional; default: false)  (optional)</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity">The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <returns>List&lt;Photo&gt;</returns>
        List<Photo> GetUserPhotos(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), bool? stats = default(bool?), StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), Orientation? orientation = default(Orientation?));

        /// <summary>
        /// List a user&#39;s photos
        /// </summary>
        /// <remarks>
        /// Get a list of photos uploaded by a user.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="stats">Show the stats for each user&#39;s photo. (Optional; default: false)  (optional)</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity">The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Photo&gt;</returns>
        ApiResponse<List<Photo>> GetUserPhotosWithHttpInfo(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), bool? stats = default(bool?), StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), Orientation? orientation = default(Orientation?));
        /// <summary>
        /// Get a user&#39;s portfolio link
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <returns>PortfolioLink</returns>
        PortfolioLink GetUserPortfolioLink(string username);

        /// <summary>
        /// Get a user&#39;s portfolio link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <returns>ApiResponse of PortfolioLink</returns>
        ApiResponse<PortfolioLink> GetUserPortfolioLinkWithHttpInfo(string username);
        /// <summary>
        /// Get a user&#39;s statistics
        /// </summary>
        /// <remarks>
        /// Retrieve the consolidated number of downloads, views and likes of all user&#39;s photos, as well as the historical breakdown and average of these stats in a specific timeframe (default is 30 days).
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity"> The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <returns>UserStatistics</returns>
        UserStatistics GetUserStatistics(string username, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?));

        /// <summary>
        /// Get a user&#39;s statistics
        /// </summary>
        /// <remarks>
        /// Retrieve the consolidated number of downloads, views and likes of all user&#39;s photos, as well as the historical breakdown and average of these stats in a specific timeframe (default is 30 days).
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity"> The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <returns>ApiResponse of UserStatistics</returns>
        ApiResponse<UserStatistics> GetUserStatisticsWithHttpInfo(string username, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a user&#39;s public profile
        /// </summary>
        /// <remarks>
        /// Retrieve public details on a given user.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a user&#39;s public profile
        /// </summary>
        /// <remarks>
        /// Retrieve public details on a given user.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserWithHttpInfoAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List a user&#39;s collections
        /// </summary>
        /// <remarks>
        /// Get a list of collections created by the user.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        System.Threading.Tasks.Task<List<Collection>> GetUserCollectionsAsync(string username, int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List a user&#39;s collections
        /// </summary>
        /// <remarks>
        /// Get a list of collections created by the user.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Collection>>> GetUserCollectionsWithHttpInfoAsync(string username, int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List a user&#39;s liked photos
        /// </summary>
        /// <remarks>
        /// Get a list of photos liked by a user.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username. </param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Photo&gt;</returns>
        System.Threading.Tasks.Task<List<Photo>> GetUserLikedPhotosAsync(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), Orientation? orientation = default(Orientation?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List a user&#39;s liked photos
        /// </summary>
        /// <remarks>
        /// Get a list of photos liked by a user.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username. </param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Photo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Photo>>> GetUserLikedPhotosWithHttpInfoAsync(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), Orientation? orientation = default(Orientation?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List a user&#39;s photos
        /// </summary>
        /// <remarks>
        /// Get a list of photos uploaded by a user.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="stats">Show the stats for each user&#39;s photo. (Optional; default: false)  (optional)</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity">The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Photo&gt;</returns>
        System.Threading.Tasks.Task<List<Photo>> GetUserPhotosAsync(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), bool? stats = default(bool?), StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), Orientation? orientation = default(Orientation?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List a user&#39;s photos
        /// </summary>
        /// <remarks>
        /// Get a list of photos uploaded by a user.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="stats">Show the stats for each user&#39;s photo. (Optional; default: false)  (optional)</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity">The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Photo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Photo>>> GetUserPhotosWithHttpInfoAsync(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), bool? stats = default(bool?), StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), Orientation? orientation = default(Orientation?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a user&#39;s portfolio link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PortfolioLink</returns>
        System.Threading.Tasks.Task<PortfolioLink> GetUserPortfolioLinkAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a user&#39;s portfolio link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PortfolioLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioLink>> GetUserPortfolioLinkWithHttpInfoAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a user&#39;s statistics
        /// </summary>
        /// <remarks>
        /// Retrieve the consolidated number of downloads, views and likes of all user&#39;s photos, as well as the historical breakdown and average of these stats in a specific timeframe (default is 30 days).
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity"> The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserStatistics</returns>
        System.Threading.Tasks.Task<UserStatistics> GetUserStatisticsAsync(string username, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a user&#39;s statistics
        /// </summary>
        /// <remarks>
        /// Retrieve the consolidated number of downloads, views and likes of all user&#39;s photos, as well as the historical breakdown and average of these stats in a specific timeframe (default is 30 days).
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity"> The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserStatistics>> GetUserStatisticsWithHttpInfoAsync(string username, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IDisposable, IUsersApi
    {
        private OASPlash.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public UsersApi(string basePath)
        {
            this.Configuration = OASPlash.Core.Client.Configuration.MergeConfigurations(
                OASPlash.Core.Client.GlobalConfiguration.Instance,
                new OASPlash.Core.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new OASPlash.Core.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public UsersApi(OASPlash.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OASPlash.Core.Client.Configuration.MergeConfigurations(
                OASPlash.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new OASPlash.Core.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UsersApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UsersApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = OASPlash.Core.Client.Configuration.MergeConfigurations(
                OASPlash.Core.Client.GlobalConfiguration.Instance,
                new OASPlash.Core.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new OASPlash.Core.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UsersApi(HttpClient client, OASPlash.Core.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = OASPlash.Core.Client.Configuration.MergeConfigurations(
                OASPlash.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new OASPlash.Core.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public UsersApi(OASPlash.Core.Client.ISynchronousClient client, OASPlash.Core.Client.IAsynchronousClient asyncClient, OASPlash.Core.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public OASPlash.Core.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OASPlash.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OASPlash.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OASPlash.Core.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OASPlash.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a user&#39;s public profile Retrieve public details on a given user.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <returns>User</returns>
        public User GetUser(string username)
        {
            OASPlash.Core.Client.ApiResponse<User> localVarResponse = GetUserWithHttpInfo(username);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user&#39;s public profile Retrieve public details on a given user.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <returns>ApiResponse of User</returns>
        public OASPlash.Core.Client.ApiResponse<User> GetUserWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUser");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", OASPlash.Core.Client.ClientUtils.ParameterToString(username)); // path parameter

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/users/{username}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a user&#39;s public profile Retrieve public details on a given user.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<User> localVarResponse = await GetUserWithHttpInfoAsync(username, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user&#39;s public profile Retrieve public details on a given user.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<User>> GetUserWithHttpInfoAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUser");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", OASPlash.Core.Client.ClientUtils.ParameterToString(username)); // path parameter

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/users/{username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a user&#39;s collections Get a list of collections created by the user.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <returns>List&lt;Collection&gt;</returns>
        public List<Collection> GetUserCollections(string username, int? page = default(int?), int? perPage = default(int?))
        {
            OASPlash.Core.Client.ApiResponse<List<Collection>> localVarResponse = GetUserCollectionsWithHttpInfo(username, page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#39;s collections Get a list of collections created by the user.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        public OASPlash.Core.Client.ApiResponse<List<Collection>> GetUserCollectionsWithHttpInfo(string username, int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUserCollections");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", OASPlash.Core.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Collection>>("/users/{username}/collections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a user&#39;s collections Get a list of collections created by the user.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        public async System.Threading.Tasks.Task<List<Collection>> GetUserCollectionsAsync(string username, int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<List<Collection>> localVarResponse = await GetUserCollectionsWithHttpInfoAsync(username, page, perPage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#39;s collections Get a list of collections created by the user.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<List<Collection>>> GetUserCollectionsWithHttpInfoAsync(string username, int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUserCollections");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", OASPlash.Core.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Collection>>("/users/{username}/collections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a user&#39;s liked photos Get a list of photos liked by a user.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username. </param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <returns>List&lt;Photo&gt;</returns>
        public List<Photo> GetUserLikedPhotos(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), Orientation? orientation = default(Orientation?))
        {
            OASPlash.Core.Client.ApiResponse<List<Photo>> localVarResponse = GetUserLikedPhotosWithHttpInfo(username, page, perPage, orderBy, orientation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#39;s liked photos Get a list of photos liked by a user.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username. </param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Photo&gt;</returns>
        public OASPlash.Core.Client.ApiResponse<List<Photo>> GetUserLikedPhotosWithHttpInfo(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), Orientation? orientation = default(Orientation?))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUserLikedPhotos");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", OASPlash.Core.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (orientation != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "orientation", orientation));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Photo>>("/users/{username}/likes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserLikedPhotos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a user&#39;s liked photos Get a list of photos liked by a user.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username. </param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Photo&gt;</returns>
        public async System.Threading.Tasks.Task<List<Photo>> GetUserLikedPhotosAsync(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), Orientation? orientation = default(Orientation?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<List<Photo>> localVarResponse = await GetUserLikedPhotosWithHttpInfoAsync(username, page, perPage, orderBy, orientation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#39;s liked photos Get a list of photos liked by a user.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username. </param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Photo&gt;)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<List<Photo>>> GetUserLikedPhotosWithHttpInfoAsync(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), Orientation? orientation = default(Orientation?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUserLikedPhotos");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", OASPlash.Core.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (orientation != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "orientation", orientation));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Photo>>("/users/{username}/likes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserLikedPhotos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a user&#39;s photos Get a list of photos uploaded by a user.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="stats">Show the stats for each user&#39;s photo. (Optional; default: false)  (optional)</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity">The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <returns>List&lt;Photo&gt;</returns>
        public List<Photo> GetUserPhotos(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), bool? stats = default(bool?), StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), Orientation? orientation = default(Orientation?))
        {
            OASPlash.Core.Client.ApiResponse<List<Photo>> localVarResponse = GetUserPhotosWithHttpInfo(username, page, perPage, orderBy, stats, resolution, quantity, orientation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#39;s photos Get a list of photos uploaded by a user.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="stats">Show the stats for each user&#39;s photo. (Optional; default: false)  (optional)</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity">The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Photo&gt;</returns>
        public OASPlash.Core.Client.ApiResponse<List<Photo>> GetUserPhotosWithHttpInfo(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), bool? stats = default(bool?), StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), Orientation? orientation = default(Orientation?))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUserPhotos");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", OASPlash.Core.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (stats != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "stats", stats));
            }
            if (resolution != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "resolution", resolution));
            }
            if (quantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "quantity", quantity));
            }
            if (orientation != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "orientation", orientation));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Photo>>("/users/{username}/photos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPhotos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a user&#39;s photos Get a list of photos uploaded by a user.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="stats">Show the stats for each user&#39;s photo. (Optional; default: false)  (optional)</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity">The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Photo&gt;</returns>
        public async System.Threading.Tasks.Task<List<Photo>> GetUserPhotosAsync(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), bool? stats = default(bool?), StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), Orientation? orientation = default(Orientation?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<List<Photo>> localVarResponse = await GetUserPhotosWithHttpInfoAsync(username, page, perPage, orderBy, stats, resolution, quantity, orientation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#39;s photos Get a list of photos uploaded by a user.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="stats">Show the stats for each user&#39;s photo. (Optional; default: false)  (optional)</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity">The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Photo&gt;)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<List<Photo>>> GetUserPhotosWithHttpInfoAsync(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), bool? stats = default(bool?), StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), Orientation? orientation = default(Orientation?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUserPhotos");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", OASPlash.Core.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (stats != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "stats", stats));
            }
            if (resolution != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "resolution", resolution));
            }
            if (quantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "quantity", quantity));
            }
            if (orientation != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "orientation", orientation));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Photo>>("/users/{username}/photos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPhotos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a user&#39;s portfolio link 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <returns>PortfolioLink</returns>
        public PortfolioLink GetUserPortfolioLink(string username)
        {
            OASPlash.Core.Client.ApiResponse<PortfolioLink> localVarResponse = GetUserPortfolioLinkWithHttpInfo(username);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user&#39;s portfolio link 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <returns>ApiResponse of PortfolioLink</returns>
        public OASPlash.Core.Client.ApiResponse<PortfolioLink> GetUserPortfolioLinkWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUserPortfolioLink");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", OASPlash.Core.Client.ClientUtils.ParameterToString(username)); // path parameter

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PortfolioLink>("/users/{username}/portfolio", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPortfolioLink", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a user&#39;s portfolio link 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PortfolioLink</returns>
        public async System.Threading.Tasks.Task<PortfolioLink> GetUserPortfolioLinkAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<PortfolioLink> localVarResponse = await GetUserPortfolioLinkWithHttpInfoAsync(username, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user&#39;s portfolio link 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PortfolioLink)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<PortfolioLink>> GetUserPortfolioLinkWithHttpInfoAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUserPortfolioLink");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", OASPlash.Core.Client.ClientUtils.ParameterToString(username)); // path parameter

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PortfolioLink>("/users/{username}/portfolio", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPortfolioLink", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a user&#39;s statistics Retrieve the consolidated number of downloads, views and likes of all user&#39;s photos, as well as the historical breakdown and average of these stats in a specific timeframe (default is 30 days).
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity"> The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <returns>UserStatistics</returns>
        public UserStatistics GetUserStatistics(string username, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?))
        {
            OASPlash.Core.Client.ApiResponse<UserStatistics> localVarResponse = GetUserStatisticsWithHttpInfo(username, resolution, quantity);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user&#39;s statistics Retrieve the consolidated number of downloads, views and likes of all user&#39;s photos, as well as the historical breakdown and average of these stats in a specific timeframe (default is 30 days).
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity"> The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <returns>ApiResponse of UserStatistics</returns>
        public OASPlash.Core.Client.ApiResponse<UserStatistics> GetUserStatisticsWithHttpInfo(string username, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUserStatistics");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", OASPlash.Core.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (resolution != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "resolution", resolution));
            }
            if (quantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "quantity", quantity));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserStatistics>("/users/{username}/statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a user&#39;s statistics Retrieve the consolidated number of downloads, views and likes of all user&#39;s photos, as well as the historical breakdown and average of these stats in a specific timeframe (default is 30 days).
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity"> The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserStatistics</returns>
        public async System.Threading.Tasks.Task<UserStatistics> GetUserStatisticsAsync(string username, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<UserStatistics> localVarResponse = await GetUserStatisticsWithHttpInfoAsync(username, resolution, quantity, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user&#39;s statistics Retrieve the consolidated number of downloads, views and likes of all user&#39;s photos, as well as the historical breakdown and average of these stats in a specific timeframe (default is 30 days).
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity"> The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserStatistics)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<UserStatistics>> GetUserStatisticsWithHttpInfoAsync(string username, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUserStatistics");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", OASPlash.Core.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (resolution != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "resolution", resolution));
            }
            if (quantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "quantity", quantity));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserStatistics>("/users/{username}/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
