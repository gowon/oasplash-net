/*
 * Unsplash API
 *
 * This document describes the resources that make up the official Unsplash JSON API. 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using OASPlash.Core.Client;
using OASPlash.Core.Model;

namespace OASPlash.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPhotosApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a photo
        /// </summary>
        /// <remarks>
        /// Retrieve a single photo.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <returns>Photo</returns>
        Photo GetPhotoById(string id);

        /// <summary>
        /// Get a photo
        /// </summary>
        /// <remarks>
        /// Retrieve a single photo.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <returns>ApiResponse of Photo</returns>
        ApiResponse<Photo> GetPhotoByIdWithHttpInfo(string id);
        /// <summary>
        /// Get a photo&#39;s statistics
        /// </summary>
        /// <remarks>
        /// Retrieve total number of downloads, views and likes of a single photo, as well as the historical breakdown of these stats in a specific timeframe (default is 30 days). 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The public id of the photo.</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity">The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <returns>PhotoStatistics</returns>
        PhotoStatistics GetPhotoStatistics(string id, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?));

        /// <summary>
        /// Get a photo&#39;s statistics
        /// </summary>
        /// <remarks>
        /// Retrieve total number of downloads, views and likes of a single photo, as well as the historical breakdown of these stats in a specific timeframe (default is 30 days). 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The public id of the photo.</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity">The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <returns>ApiResponse of PhotoStatistics</returns>
        ApiResponse<PhotoStatistics> GetPhotoStatisticsWithHttpInfo(string id, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?));
        /// <summary>
        /// List photos
        /// </summary>
        /// <remarks>
        /// Get a single page from the list of all photos.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <returns>List&lt;Photo&gt;</returns>
        List<Photo> GetPhotos(int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?));

        /// <summary>
        /// List photos
        /// </summary>
        /// <remarks>
        /// Get a single page from the list of all photos.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Photo&gt;</returns>
        ApiResponse<List<Photo>> GetPhotosWithHttpInfo(int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?));
        /// <summary>
        /// Get a random photo
        /// </summary>
        /// <remarks>
        /// Retrieve a single random photo, given optional filters. You can&#39;t use the collections and query parameters in the same request When supplying a count parameter - and only then - the response will be an array of photos, even if the value of count is 1. 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of photos to return. (Default: 1; max: 30) </param>
        /// <param name="collections">Public collection ID(‘s) to filter selection. If multiple, comma-separated (optional)</param>
        /// <param name="featured">Limit selection to featured photos. (optional)</param>
        /// <param name="username">Limit selection to a single user. (optional)</param>
        /// <param name="query">Limit selection to photos matching a search term. (optional)</param>
        /// <param name="orientation">Filter by photo orientation. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="contentFilter">Limit results by content safety. Default: low. Valid values are low and high.  (optional)</param>
        /// <returns>List&lt;Photo&gt;</returns>
        List<Photo> GetRandomPhoto(int count, string collections = default(string), bool? featured = default(bool?), string username = default(string), string query = default(string), Orientation? orientation = default(Orientation?), ContentFilter? contentFilter = default(ContentFilter?));

        /// <summary>
        /// Get a random photo
        /// </summary>
        /// <remarks>
        /// Retrieve a single random photo, given optional filters. You can&#39;t use the collections and query parameters in the same request When supplying a count parameter - and only then - the response will be an array of photos, even if the value of count is 1. 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of photos to return. (Default: 1; max: 30) </param>
        /// <param name="collections">Public collection ID(‘s) to filter selection. If multiple, comma-separated (optional)</param>
        /// <param name="featured">Limit selection to featured photos. (optional)</param>
        /// <param name="username">Limit selection to a single user. (optional)</param>
        /// <param name="query">Limit selection to photos matching a search term. (optional)</param>
        /// <param name="orientation">Filter by photo orientation. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="contentFilter">Limit results by content safety. Default: low. Valid values are low and high.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Photo&gt;</returns>
        ApiResponse<List<Photo>> GetRandomPhotoWithHttpInfo(int count, string collections = default(string), bool? featured = default(bool?), string username = default(string), string query = default(string), Orientation? orientation = default(Orientation?), ContentFilter? contentFilter = default(ContentFilter?));
        /// <summary>
        /// Like a photo on behalf of the logged-in user.
        /// </summary>
        /// <remarks>
        /// This action is idempotent; sending the POST request to a single photo multiple times has no additional effect. 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <returns>Photo</returns>
        Photo LikePhoto(string id);

        /// <summary>
        /// Like a photo on behalf of the logged-in user.
        /// </summary>
        /// <remarks>
        /// This action is idempotent; sending the POST request to a single photo multiple times has no additional effect. 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <returns>ApiResponse of Photo</returns>
        ApiResponse<Photo> LikePhotoWithHttpInfo(string id);
        /// <summary>
        /// Track a photo download
        /// </summary>
        /// <remarks>
        /// To abide by the API guidelines, you need to trigger a GET request to this endpoint every time your application performs a download of a photo. To understand what constitutes a download, please refer to the ‘Triggering a download&#39; guideline. 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <returns>Photo</returns>
        Photo TrackPhotoDownload(string id);

        /// <summary>
        /// Track a photo download
        /// </summary>
        /// <remarks>
        /// To abide by the API guidelines, you need to trigger a GET request to this endpoint every time your application performs a download of a photo. To understand what constitutes a download, please refer to the ‘Triggering a download&#39; guideline. 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <returns>ApiResponse of Photo</returns>
        ApiResponse<Photo> TrackPhotoDownloadWithHttpInfo(string id);
        /// <summary>
        /// Remove a user&#39;s like of a photo.
        /// </summary>
        /// <remarks>
        /// This action is idempotent; sending the DELETE request to a single photo multiple times has no additional effect. 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <returns>Photo</returns>
        Photo UnlikePhoto(string id);

        /// <summary>
        /// Remove a user&#39;s like of a photo.
        /// </summary>
        /// <remarks>
        /// This action is idempotent; sending the DELETE request to a single photo multiple times has no additional effect. 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <returns>ApiResponse of Photo</returns>
        ApiResponse<Photo> UnlikePhotoWithHttpInfo(string id);
        /// <summary>
        /// Update a photo
        /// </summary>
        /// <remarks>
        /// Update a photo on behalf of the logged-in user. This requires the write_photos scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="description">The photo&#39;s description (Optional). (optional)</param>
        /// <param name="showOnProfile">The photo&#39;s visibility (Optional). (optional)</param>
        /// <param name="tags">The photo&#39;s tags (Optional). (optional)</param>
        /// <param name="locationLatitude">The photo location&#39;s latitude rounded to 6 decimals. (Optional) (optional)</param>
        /// <param name="locationLongitude">The photo location&#39;s longitude rounded to 6 decimals. (Optional) (optional)</param>
        /// <param name="locationName">The photo&#39;s full location string (including city and country) (Optional) (optional)</param>
        /// <param name="locationCity">The photo location&#39;s city (Optional) (optional)</param>
        /// <param name="locationCountry">The photo location&#39;s country (Optional) (optional)</param>
        /// <param name="exifMake">Camera&#39;s brand (Optional) (optional)</param>
        /// <param name="exifModel">Camera&#39;s model (Optional) (optional)</param>
        /// <param name="exifExposureTime">Camera&#39;s exposure time (Optional) (optional)</param>
        /// <param name="exifApertureValue">Camera&#39;s aperture value (Optional) (optional)</param>
        /// <param name="exifFocalLength">Camera&#39;s focal length (Optional) (optional)</param>
        /// <param name="exifIsoSpeedRatings">Camera&#39;s iso (Optional) (optional)</param>
        /// <returns>Photo</returns>
        Photo UpdatePhoto(string id, string description = default(string), bool? showOnProfile = default(bool?), string tags = default(string), double? locationLatitude = default(double?), double? locationLongitude = default(double?), string locationName = default(string), string locationCity = default(string), string locationCountry = default(string), string exifMake = default(string), string exifModel = default(string), string exifExposureTime = default(string), string exifApertureValue = default(string), string exifFocalLength = default(string), string exifIsoSpeedRatings = default(string));

        /// <summary>
        /// Update a photo
        /// </summary>
        /// <remarks>
        /// Update a photo on behalf of the logged-in user. This requires the write_photos scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="description">The photo&#39;s description (Optional). (optional)</param>
        /// <param name="showOnProfile">The photo&#39;s visibility (Optional). (optional)</param>
        /// <param name="tags">The photo&#39;s tags (Optional). (optional)</param>
        /// <param name="locationLatitude">The photo location&#39;s latitude rounded to 6 decimals. (Optional) (optional)</param>
        /// <param name="locationLongitude">The photo location&#39;s longitude rounded to 6 decimals. (Optional) (optional)</param>
        /// <param name="locationName">The photo&#39;s full location string (including city and country) (Optional) (optional)</param>
        /// <param name="locationCity">The photo location&#39;s city (Optional) (optional)</param>
        /// <param name="locationCountry">The photo location&#39;s country (Optional) (optional)</param>
        /// <param name="exifMake">Camera&#39;s brand (Optional) (optional)</param>
        /// <param name="exifModel">Camera&#39;s model (Optional) (optional)</param>
        /// <param name="exifExposureTime">Camera&#39;s exposure time (Optional) (optional)</param>
        /// <param name="exifApertureValue">Camera&#39;s aperture value (Optional) (optional)</param>
        /// <param name="exifFocalLength">Camera&#39;s focal length (Optional) (optional)</param>
        /// <param name="exifIsoSpeedRatings">Camera&#39;s iso (Optional) (optional)</param>
        /// <returns>ApiResponse of Photo</returns>
        ApiResponse<Photo> UpdatePhotoWithHttpInfo(string id, string description = default(string), bool? showOnProfile = default(bool?), string tags = default(string), double? locationLatitude = default(double?), double? locationLongitude = default(double?), string locationName = default(string), string locationCity = default(string), string locationCountry = default(string), string exifMake = default(string), string exifModel = default(string), string exifExposureTime = default(string), string exifApertureValue = default(string), string exifFocalLength = default(string), string exifIsoSpeedRatings = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPhotosApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a photo
        /// </summary>
        /// <remarks>
        /// Retrieve a single photo.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Photo</returns>
        System.Threading.Tasks.Task<Photo> GetPhotoByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a photo
        /// </summary>
        /// <remarks>
        /// Retrieve a single photo.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Photo)</returns>
        System.Threading.Tasks.Task<ApiResponse<Photo>> GetPhotoByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a photo&#39;s statistics
        /// </summary>
        /// <remarks>
        /// Retrieve total number of downloads, views and likes of a single photo, as well as the historical breakdown of these stats in a specific timeframe (default is 30 days). 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The public id of the photo.</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity">The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhotoStatistics</returns>
        System.Threading.Tasks.Task<PhotoStatistics> GetPhotoStatisticsAsync(string id, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a photo&#39;s statistics
        /// </summary>
        /// <remarks>
        /// Retrieve total number of downloads, views and likes of a single photo, as well as the historical breakdown of these stats in a specific timeframe (default is 30 days). 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The public id of the photo.</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity">The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhotoStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhotoStatistics>> GetPhotoStatisticsWithHttpInfoAsync(string id, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List photos
        /// </summary>
        /// <remarks>
        /// Get a single page from the list of all photos.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Photo&gt;</returns>
        System.Threading.Tasks.Task<List<Photo>> GetPhotosAsync(int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List photos
        /// </summary>
        /// <remarks>
        /// Get a single page from the list of all photos.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Photo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Photo>>> GetPhotosWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a random photo
        /// </summary>
        /// <remarks>
        /// Retrieve a single random photo, given optional filters. You can&#39;t use the collections and query parameters in the same request When supplying a count parameter - and only then - the response will be an array of photos, even if the value of count is 1. 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of photos to return. (Default: 1; max: 30) </param>
        /// <param name="collections">Public collection ID(‘s) to filter selection. If multiple, comma-separated (optional)</param>
        /// <param name="featured">Limit selection to featured photos. (optional)</param>
        /// <param name="username">Limit selection to a single user. (optional)</param>
        /// <param name="query">Limit selection to photos matching a search term. (optional)</param>
        /// <param name="orientation">Filter by photo orientation. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="contentFilter">Limit results by content safety. Default: low. Valid values are low and high.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Photo&gt;</returns>
        System.Threading.Tasks.Task<List<Photo>> GetRandomPhotoAsync(int count, string collections = default(string), bool? featured = default(bool?), string username = default(string), string query = default(string), Orientation? orientation = default(Orientation?), ContentFilter? contentFilter = default(ContentFilter?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a random photo
        /// </summary>
        /// <remarks>
        /// Retrieve a single random photo, given optional filters. You can&#39;t use the collections and query parameters in the same request When supplying a count parameter - and only then - the response will be an array of photos, even if the value of count is 1. 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of photos to return. (Default: 1; max: 30) </param>
        /// <param name="collections">Public collection ID(‘s) to filter selection. If multiple, comma-separated (optional)</param>
        /// <param name="featured">Limit selection to featured photos. (optional)</param>
        /// <param name="username">Limit selection to a single user. (optional)</param>
        /// <param name="query">Limit selection to photos matching a search term. (optional)</param>
        /// <param name="orientation">Filter by photo orientation. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="contentFilter">Limit results by content safety. Default: low. Valid values are low and high.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Photo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Photo>>> GetRandomPhotoWithHttpInfoAsync(int count, string collections = default(string), bool? featured = default(bool?), string username = default(string), string query = default(string), Orientation? orientation = default(Orientation?), ContentFilter? contentFilter = default(ContentFilter?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Like a photo on behalf of the logged-in user.
        /// </summary>
        /// <remarks>
        /// This action is idempotent; sending the POST request to a single photo multiple times has no additional effect. 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Photo</returns>
        System.Threading.Tasks.Task<Photo> LikePhotoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Like a photo on behalf of the logged-in user.
        /// </summary>
        /// <remarks>
        /// This action is idempotent; sending the POST request to a single photo multiple times has no additional effect. 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Photo)</returns>
        System.Threading.Tasks.Task<ApiResponse<Photo>> LikePhotoWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Track a photo download
        /// </summary>
        /// <remarks>
        /// To abide by the API guidelines, you need to trigger a GET request to this endpoint every time your application performs a download of a photo. To understand what constitutes a download, please refer to the ‘Triggering a download&#39; guideline. 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Photo</returns>
        System.Threading.Tasks.Task<Photo> TrackPhotoDownloadAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Track a photo download
        /// </summary>
        /// <remarks>
        /// To abide by the API guidelines, you need to trigger a GET request to this endpoint every time your application performs a download of a photo. To understand what constitutes a download, please refer to the ‘Triggering a download&#39; guideline. 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Photo)</returns>
        System.Threading.Tasks.Task<ApiResponse<Photo>> TrackPhotoDownloadWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a user&#39;s like of a photo.
        /// </summary>
        /// <remarks>
        /// This action is idempotent; sending the DELETE request to a single photo multiple times has no additional effect. 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Photo</returns>
        System.Threading.Tasks.Task<Photo> UnlikePhotoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a user&#39;s like of a photo.
        /// </summary>
        /// <remarks>
        /// This action is idempotent; sending the DELETE request to a single photo multiple times has no additional effect. 
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Photo)</returns>
        System.Threading.Tasks.Task<ApiResponse<Photo>> UnlikePhotoWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a photo
        /// </summary>
        /// <remarks>
        /// Update a photo on behalf of the logged-in user. This requires the write_photos scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="description">The photo&#39;s description (Optional). (optional)</param>
        /// <param name="showOnProfile">The photo&#39;s visibility (Optional). (optional)</param>
        /// <param name="tags">The photo&#39;s tags (Optional). (optional)</param>
        /// <param name="locationLatitude">The photo location&#39;s latitude rounded to 6 decimals. (Optional) (optional)</param>
        /// <param name="locationLongitude">The photo location&#39;s longitude rounded to 6 decimals. (Optional) (optional)</param>
        /// <param name="locationName">The photo&#39;s full location string (including city and country) (Optional) (optional)</param>
        /// <param name="locationCity">The photo location&#39;s city (Optional) (optional)</param>
        /// <param name="locationCountry">The photo location&#39;s country (Optional) (optional)</param>
        /// <param name="exifMake">Camera&#39;s brand (Optional) (optional)</param>
        /// <param name="exifModel">Camera&#39;s model (Optional) (optional)</param>
        /// <param name="exifExposureTime">Camera&#39;s exposure time (Optional) (optional)</param>
        /// <param name="exifApertureValue">Camera&#39;s aperture value (Optional) (optional)</param>
        /// <param name="exifFocalLength">Camera&#39;s focal length (Optional) (optional)</param>
        /// <param name="exifIsoSpeedRatings">Camera&#39;s iso (Optional) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Photo</returns>
        System.Threading.Tasks.Task<Photo> UpdatePhotoAsync(string id, string description = default(string), bool? showOnProfile = default(bool?), string tags = default(string), double? locationLatitude = default(double?), double? locationLongitude = default(double?), string locationName = default(string), string locationCity = default(string), string locationCountry = default(string), string exifMake = default(string), string exifModel = default(string), string exifExposureTime = default(string), string exifApertureValue = default(string), string exifFocalLength = default(string), string exifIsoSpeedRatings = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a photo
        /// </summary>
        /// <remarks>
        /// Update a photo on behalf of the logged-in user. This requires the write_photos scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="description">The photo&#39;s description (Optional). (optional)</param>
        /// <param name="showOnProfile">The photo&#39;s visibility (Optional). (optional)</param>
        /// <param name="tags">The photo&#39;s tags (Optional). (optional)</param>
        /// <param name="locationLatitude">The photo location&#39;s latitude rounded to 6 decimals. (Optional) (optional)</param>
        /// <param name="locationLongitude">The photo location&#39;s longitude rounded to 6 decimals. (Optional) (optional)</param>
        /// <param name="locationName">The photo&#39;s full location string (including city and country) (Optional) (optional)</param>
        /// <param name="locationCity">The photo location&#39;s city (Optional) (optional)</param>
        /// <param name="locationCountry">The photo location&#39;s country (Optional) (optional)</param>
        /// <param name="exifMake">Camera&#39;s brand (Optional) (optional)</param>
        /// <param name="exifModel">Camera&#39;s model (Optional) (optional)</param>
        /// <param name="exifExposureTime">Camera&#39;s exposure time (Optional) (optional)</param>
        /// <param name="exifApertureValue">Camera&#39;s aperture value (Optional) (optional)</param>
        /// <param name="exifFocalLength">Camera&#39;s focal length (Optional) (optional)</param>
        /// <param name="exifIsoSpeedRatings">Camera&#39;s iso (Optional) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Photo)</returns>
        System.Threading.Tasks.Task<ApiResponse<Photo>> UpdatePhotoWithHttpInfoAsync(string id, string description = default(string), bool? showOnProfile = default(bool?), string tags = default(string), double? locationLatitude = default(double?), double? locationLongitude = default(double?), string locationName = default(string), string locationCity = default(string), string locationCountry = default(string), string exifMake = default(string), string exifModel = default(string), string exifExposureTime = default(string), string exifApertureValue = default(string), string exifFocalLength = default(string), string exifIsoSpeedRatings = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPhotosApi : IPhotosApiSync, IPhotosApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PhotosApi : IDisposable, IPhotosApi
    {
        private OASPlash.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PhotosApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public PhotosApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhotosApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public PhotosApi(string basePath)
        {
            this.Configuration = OASPlash.Core.Client.Configuration.MergeConfigurations(
                OASPlash.Core.Client.GlobalConfiguration.Instance,
                new OASPlash.Core.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new OASPlash.Core.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhotosApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public PhotosApi(OASPlash.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OASPlash.Core.Client.Configuration.MergeConfigurations(
                OASPlash.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new OASPlash.Core.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhotosApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public PhotosApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhotosApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public PhotosApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = OASPlash.Core.Client.Configuration.MergeConfigurations(
                OASPlash.Core.Client.GlobalConfiguration.Instance,
                new OASPlash.Core.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new OASPlash.Core.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhotosApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public PhotosApi(HttpClient client, OASPlash.Core.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = OASPlash.Core.Client.Configuration.MergeConfigurations(
                OASPlash.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new OASPlash.Core.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhotosApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public PhotosApi(OASPlash.Core.Client.ISynchronousClient client, OASPlash.Core.Client.IAsynchronousClient asyncClient, OASPlash.Core.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public OASPlash.Core.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OASPlash.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OASPlash.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OASPlash.Core.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OASPlash.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a photo Retrieve a single photo.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <returns>Photo</returns>
        public Photo GetPhotoById(string id)
        {
            OASPlash.Core.Client.ApiResponse<Photo> localVarResponse = GetPhotoByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a photo Retrieve a single photo.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <returns>ApiResponse of Photo</returns>
        public OASPlash.Core.Client.ApiResponse<Photo> GetPhotoByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PhotosApi->GetPhotoById");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Photo>("/photos/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhotoById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a photo Retrieve a single photo.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Photo</returns>
        public async System.Threading.Tasks.Task<Photo> GetPhotoByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<Photo> localVarResponse = await GetPhotoByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a photo Retrieve a single photo.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Photo)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<Photo>> GetPhotoByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PhotosApi->GetPhotoById");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Photo>("/photos/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhotoById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a photo&#39;s statistics Retrieve total number of downloads, views and likes of a single photo, as well as the historical breakdown of these stats in a specific timeframe (default is 30 days). 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The public id of the photo.</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity">The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <returns>PhotoStatistics</returns>
        public PhotoStatistics GetPhotoStatistics(string id, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?))
        {
            OASPlash.Core.Client.ApiResponse<PhotoStatistics> localVarResponse = GetPhotoStatisticsWithHttpInfo(id, resolution, quantity);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a photo&#39;s statistics Retrieve total number of downloads, views and likes of a single photo, as well as the historical breakdown of these stats in a specific timeframe (default is 30 days). 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The public id of the photo.</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity">The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <returns>ApiResponse of PhotoStatistics</returns>
        public OASPlash.Core.Client.ApiResponse<PhotoStatistics> GetPhotoStatisticsWithHttpInfo(string id, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PhotosApi->GetPhotoStatistics");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (resolution != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "resolution", resolution));
            }
            if (quantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "quantity", quantity));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PhotoStatistics>("/photos/{id}/statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhotoStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a photo&#39;s statistics Retrieve total number of downloads, views and likes of a single photo, as well as the historical breakdown of these stats in a specific timeframe (default is 30 days). 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The public id of the photo.</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity">The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhotoStatistics</returns>
        public async System.Threading.Tasks.Task<PhotoStatistics> GetPhotoStatisticsAsync(string id, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<PhotoStatistics> localVarResponse = await GetPhotoStatisticsWithHttpInfoAsync(id, resolution, quantity, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a photo&#39;s statistics Retrieve total number of downloads, views and likes of a single photo, as well as the historical breakdown of these stats in a specific timeframe (default is 30 days). 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The public id of the photo.</param>
        /// <param name="resolution">The frequency of the stats. (Optional; default: “days”)  (optional)</param>
        /// <param name="quantity">The amount of for each stat. (Optional; default: 30)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhotoStatistics)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<PhotoStatistics>> GetPhotoStatisticsWithHttpInfoAsync(string id, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PhotosApi->GetPhotoStatistics");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (resolution != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "resolution", resolution));
            }
            if (quantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "quantity", quantity));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PhotoStatistics>("/photos/{id}/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhotoStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List photos Get a single page from the list of all photos.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <returns>List&lt;Photo&gt;</returns>
        public List<Photo> GetPhotos(int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?))
        {
            OASPlash.Core.Client.ApiResponse<List<Photo>> localVarResponse = GetPhotosWithHttpInfo(page, perPage, orderBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List photos Get a single page from the list of all photos.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Photo&gt;</returns>
        public OASPlash.Core.Client.ApiResponse<List<Photo>> GetPhotosWithHttpInfo(int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?))
        {
            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Photo>>("/photos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhotos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List photos Get a single page from the list of all photos.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Photo&gt;</returns>
        public async System.Threading.Tasks.Task<List<Photo>> GetPhotosAsync(int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<List<Photo>> localVarResponse = await GetPhotosWithHttpInfoAsync(page, perPage, orderBy, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List photos Get a single page from the list of all photos.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orderBy">How to sort the photos. Optional. (Valid values: latest, oldest, popular; default: latest)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Photo&gt;)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<List<Photo>>> GetPhotosWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Photo>>("/photos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhotos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a random photo Retrieve a single random photo, given optional filters. You can&#39;t use the collections and query parameters in the same request When supplying a count parameter - and only then - the response will be an array of photos, even if the value of count is 1. 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of photos to return. (Default: 1; max: 30) </param>
        /// <param name="collections">Public collection ID(‘s) to filter selection. If multiple, comma-separated (optional)</param>
        /// <param name="featured">Limit selection to featured photos. (optional)</param>
        /// <param name="username">Limit selection to a single user. (optional)</param>
        /// <param name="query">Limit selection to photos matching a search term. (optional)</param>
        /// <param name="orientation">Filter by photo orientation. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="contentFilter">Limit results by content safety. Default: low. Valid values are low and high.  (optional)</param>
        /// <returns>List&lt;Photo&gt;</returns>
        public List<Photo> GetRandomPhoto(int count, string collections = default(string), bool? featured = default(bool?), string username = default(string), string query = default(string), Orientation? orientation = default(Orientation?), ContentFilter? contentFilter = default(ContentFilter?))
        {
            OASPlash.Core.Client.ApiResponse<List<Photo>> localVarResponse = GetRandomPhotoWithHttpInfo(count, collections, featured, username, query, orientation, contentFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a random photo Retrieve a single random photo, given optional filters. You can&#39;t use the collections and query parameters in the same request When supplying a count parameter - and only then - the response will be an array of photos, even if the value of count is 1. 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of photos to return. (Default: 1; max: 30) </param>
        /// <param name="collections">Public collection ID(‘s) to filter selection. If multiple, comma-separated (optional)</param>
        /// <param name="featured">Limit selection to featured photos. (optional)</param>
        /// <param name="username">Limit selection to a single user. (optional)</param>
        /// <param name="query">Limit selection to photos matching a search term. (optional)</param>
        /// <param name="orientation">Filter by photo orientation. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="contentFilter">Limit results by content safety. Default: low. Valid values are low and high.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Photo&gt;</returns>
        public OASPlash.Core.Client.ApiResponse<List<Photo>> GetRandomPhotoWithHttpInfo(int count, string collections = default(string), bool? featured = default(bool?), string username = default(string), string query = default(string), Orientation? orientation = default(Orientation?), ContentFilter? contentFilter = default(ContentFilter?))
        {
            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (collections != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "collections", collections));
            }
            if (featured != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "featured", featured));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (orientation != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "orientation", orientation));
            }
            if (contentFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "content_filter", contentFilter));
            }
            localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "count", count));

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Photo>>("/photos/random", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRandomPhoto", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a random photo Retrieve a single random photo, given optional filters. You can&#39;t use the collections and query parameters in the same request When supplying a count parameter - and only then - the response will be an array of photos, even if the value of count is 1. 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of photos to return. (Default: 1; max: 30) </param>
        /// <param name="collections">Public collection ID(‘s) to filter selection. If multiple, comma-separated (optional)</param>
        /// <param name="featured">Limit selection to featured photos. (optional)</param>
        /// <param name="username">Limit selection to a single user. (optional)</param>
        /// <param name="query">Limit selection to photos matching a search term. (optional)</param>
        /// <param name="orientation">Filter by photo orientation. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="contentFilter">Limit results by content safety. Default: low. Valid values are low and high.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Photo&gt;</returns>
        public async System.Threading.Tasks.Task<List<Photo>> GetRandomPhotoAsync(int count, string collections = default(string), bool? featured = default(bool?), string username = default(string), string query = default(string), Orientation? orientation = default(Orientation?), ContentFilter? contentFilter = default(ContentFilter?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<List<Photo>> localVarResponse = await GetRandomPhotoWithHttpInfoAsync(count, collections, featured, username, query, orientation, contentFilter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a random photo Retrieve a single random photo, given optional filters. You can&#39;t use the collections and query parameters in the same request When supplying a count parameter - and only then - the response will be an array of photos, even if the value of count is 1. 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of photos to return. (Default: 1; max: 30) </param>
        /// <param name="collections">Public collection ID(‘s) to filter selection. If multiple, comma-separated (optional)</param>
        /// <param name="featured">Limit selection to featured photos. (optional)</param>
        /// <param name="username">Limit selection to a single user. (optional)</param>
        /// <param name="query">Limit selection to photos matching a search term. (optional)</param>
        /// <param name="orientation">Filter by photo orientation. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="contentFilter">Limit results by content safety. Default: low. Valid values are low and high.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Photo&gt;)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<List<Photo>>> GetRandomPhotoWithHttpInfoAsync(int count, string collections = default(string), bool? featured = default(bool?), string username = default(string), string query = default(string), Orientation? orientation = default(Orientation?), ContentFilter? contentFilter = default(ContentFilter?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (collections != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "collections", collections));
            }
            if (featured != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "featured", featured));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (orientation != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "orientation", orientation));
            }
            if (contentFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "content_filter", contentFilter));
            }
            localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "count", count));

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Photo>>("/photos/random", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRandomPhoto", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Like a photo on behalf of the logged-in user. This action is idempotent; sending the POST request to a single photo multiple times has no additional effect. 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <returns>Photo</returns>
        public Photo LikePhoto(string id)
        {
            OASPlash.Core.Client.ApiResponse<Photo> localVarResponse = LikePhotoWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Like a photo on behalf of the logged-in user. This action is idempotent; sending the POST request to a single photo multiple times has no additional effect. 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <returns>ApiResponse of Photo</returns>
        public OASPlash.Core.Client.ApiResponse<Photo> LikePhotoWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PhotosApi->LikePhoto");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Photo>("/photos/{id}/like", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LikePhoto", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Like a photo on behalf of the logged-in user. This action is idempotent; sending the POST request to a single photo multiple times has no additional effect. 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Photo</returns>
        public async System.Threading.Tasks.Task<Photo> LikePhotoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<Photo> localVarResponse = await LikePhotoWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Like a photo on behalf of the logged-in user. This action is idempotent; sending the POST request to a single photo multiple times has no additional effect. 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Photo)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<Photo>> LikePhotoWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PhotosApi->LikePhoto");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Photo>("/photos/{id}/like", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LikePhoto", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Track a photo download To abide by the API guidelines, you need to trigger a GET request to this endpoint every time your application performs a download of a photo. To understand what constitutes a download, please refer to the ‘Triggering a download&#39; guideline. 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <returns>Photo</returns>
        public Photo TrackPhotoDownload(string id)
        {
            OASPlash.Core.Client.ApiResponse<Photo> localVarResponse = TrackPhotoDownloadWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Track a photo download To abide by the API guidelines, you need to trigger a GET request to this endpoint every time your application performs a download of a photo. To understand what constitutes a download, please refer to the ‘Triggering a download&#39; guideline. 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <returns>ApiResponse of Photo</returns>
        public OASPlash.Core.Client.ApiResponse<Photo> TrackPhotoDownloadWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PhotosApi->TrackPhotoDownload");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Photo>("/photos/{id}/download", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrackPhotoDownload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Track a photo download To abide by the API guidelines, you need to trigger a GET request to this endpoint every time your application performs a download of a photo. To understand what constitutes a download, please refer to the ‘Triggering a download&#39; guideline. 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Photo</returns>
        public async System.Threading.Tasks.Task<Photo> TrackPhotoDownloadAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<Photo> localVarResponse = await TrackPhotoDownloadWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Track a photo download To abide by the API guidelines, you need to trigger a GET request to this endpoint every time your application performs a download of a photo. To understand what constitutes a download, please refer to the ‘Triggering a download&#39; guideline. 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Photo)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<Photo>> TrackPhotoDownloadWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PhotosApi->TrackPhotoDownload");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Photo>("/photos/{id}/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrackPhotoDownload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a user&#39;s like of a photo. This action is idempotent; sending the DELETE request to a single photo multiple times has no additional effect. 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <returns>Photo</returns>
        public Photo UnlikePhoto(string id)
        {
            OASPlash.Core.Client.ApiResponse<Photo> localVarResponse = UnlikePhotoWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a user&#39;s like of a photo. This action is idempotent; sending the DELETE request to a single photo multiple times has no additional effect. 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <returns>ApiResponse of Photo</returns>
        public OASPlash.Core.Client.ApiResponse<Photo> UnlikePhotoWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PhotosApi->UnlikePhoto");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Photo>("/photos/{id}/like", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlikePhoto", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a user&#39;s like of a photo. This action is idempotent; sending the DELETE request to a single photo multiple times has no additional effect. 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Photo</returns>
        public async System.Threading.Tasks.Task<Photo> UnlikePhotoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<Photo> localVarResponse = await UnlikePhotoWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a user&#39;s like of a photo. This action is idempotent; sending the DELETE request to a single photo multiple times has no additional effect. 
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Photo)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<Photo>> UnlikePhotoWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PhotosApi->UnlikePhoto");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Photo>("/photos/{id}/like", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlikePhoto", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a photo Update a photo on behalf of the logged-in user. This requires the write_photos scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="description">The photo&#39;s description (Optional). (optional)</param>
        /// <param name="showOnProfile">The photo&#39;s visibility (Optional). (optional)</param>
        /// <param name="tags">The photo&#39;s tags (Optional). (optional)</param>
        /// <param name="locationLatitude">The photo location&#39;s latitude rounded to 6 decimals. (Optional) (optional)</param>
        /// <param name="locationLongitude">The photo location&#39;s longitude rounded to 6 decimals. (Optional) (optional)</param>
        /// <param name="locationName">The photo&#39;s full location string (including city and country) (Optional) (optional)</param>
        /// <param name="locationCity">The photo location&#39;s city (Optional) (optional)</param>
        /// <param name="locationCountry">The photo location&#39;s country (Optional) (optional)</param>
        /// <param name="exifMake">Camera&#39;s brand (Optional) (optional)</param>
        /// <param name="exifModel">Camera&#39;s model (Optional) (optional)</param>
        /// <param name="exifExposureTime">Camera&#39;s exposure time (Optional) (optional)</param>
        /// <param name="exifApertureValue">Camera&#39;s aperture value (Optional) (optional)</param>
        /// <param name="exifFocalLength">Camera&#39;s focal length (Optional) (optional)</param>
        /// <param name="exifIsoSpeedRatings">Camera&#39;s iso (Optional) (optional)</param>
        /// <returns>Photo</returns>
        public Photo UpdatePhoto(string id, string description = default(string), bool? showOnProfile = default(bool?), string tags = default(string), double? locationLatitude = default(double?), double? locationLongitude = default(double?), string locationName = default(string), string locationCity = default(string), string locationCountry = default(string), string exifMake = default(string), string exifModel = default(string), string exifExposureTime = default(string), string exifApertureValue = default(string), string exifFocalLength = default(string), string exifIsoSpeedRatings = default(string))
        {
            OASPlash.Core.Client.ApiResponse<Photo> localVarResponse = UpdatePhotoWithHttpInfo(id, description, showOnProfile, tags, locationLatitude, locationLongitude, locationName, locationCity, locationCountry, exifMake, exifModel, exifExposureTime, exifApertureValue, exifFocalLength, exifIsoSpeedRatings);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a photo Update a photo on behalf of the logged-in user. This requires the write_photos scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="description">The photo&#39;s description (Optional). (optional)</param>
        /// <param name="showOnProfile">The photo&#39;s visibility (Optional). (optional)</param>
        /// <param name="tags">The photo&#39;s tags (Optional). (optional)</param>
        /// <param name="locationLatitude">The photo location&#39;s latitude rounded to 6 decimals. (Optional) (optional)</param>
        /// <param name="locationLongitude">The photo location&#39;s longitude rounded to 6 decimals. (Optional) (optional)</param>
        /// <param name="locationName">The photo&#39;s full location string (including city and country) (Optional) (optional)</param>
        /// <param name="locationCity">The photo location&#39;s city (Optional) (optional)</param>
        /// <param name="locationCountry">The photo location&#39;s country (Optional) (optional)</param>
        /// <param name="exifMake">Camera&#39;s brand (Optional) (optional)</param>
        /// <param name="exifModel">Camera&#39;s model (Optional) (optional)</param>
        /// <param name="exifExposureTime">Camera&#39;s exposure time (Optional) (optional)</param>
        /// <param name="exifApertureValue">Camera&#39;s aperture value (Optional) (optional)</param>
        /// <param name="exifFocalLength">Camera&#39;s focal length (Optional) (optional)</param>
        /// <param name="exifIsoSpeedRatings">Camera&#39;s iso (Optional) (optional)</param>
        /// <returns>ApiResponse of Photo</returns>
        public OASPlash.Core.Client.ApiResponse<Photo> UpdatePhotoWithHttpInfo(string id, string description = default(string), bool? showOnProfile = default(bool?), string tags = default(string), double? locationLatitude = default(double?), double? locationLongitude = default(double?), string locationName = default(string), string locationCity = default(string), string locationCountry = default(string), string exifMake = default(string), string exifModel = default(string), string exifExposureTime = default(string), string exifApertureValue = default(string), string exifFocalLength = default(string), string exifIsoSpeedRatings = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PhotosApi->UpdatePhoto");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (showOnProfile != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "show_on_profile", showOnProfile));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (locationLatitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "location[latitude]", locationLatitude));
            }
            if (locationLongitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "location[longitude]", locationLongitude));
            }
            if (locationName != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "location[name]", locationName));
            }
            if (locationCity != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "location[city]", locationCity));
            }
            if (locationCountry != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "location[country]", locationCountry));
            }
            if (exifMake != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "exif[make]", exifMake));
            }
            if (exifModel != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "exif[model]", exifModel));
            }
            if (exifExposureTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "exif[exposure_time]", exifExposureTime));
            }
            if (exifApertureValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "exif[aperture_value]", exifApertureValue));
            }
            if (exifFocalLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "exif[focal_length]", exifFocalLength));
            }
            if (exifIsoSpeedRatings != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "exif[iso_speed_ratings]", exifIsoSpeedRatings));
            }

            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Photo>("/photos/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePhoto", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a photo Update a photo on behalf of the logged-in user. This requires the write_photos scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="description">The photo&#39;s description (Optional). (optional)</param>
        /// <param name="showOnProfile">The photo&#39;s visibility (Optional). (optional)</param>
        /// <param name="tags">The photo&#39;s tags (Optional). (optional)</param>
        /// <param name="locationLatitude">The photo location&#39;s latitude rounded to 6 decimals. (Optional) (optional)</param>
        /// <param name="locationLongitude">The photo location&#39;s longitude rounded to 6 decimals. (Optional) (optional)</param>
        /// <param name="locationName">The photo&#39;s full location string (including city and country) (Optional) (optional)</param>
        /// <param name="locationCity">The photo location&#39;s city (Optional) (optional)</param>
        /// <param name="locationCountry">The photo location&#39;s country (Optional) (optional)</param>
        /// <param name="exifMake">Camera&#39;s brand (Optional) (optional)</param>
        /// <param name="exifModel">Camera&#39;s model (Optional) (optional)</param>
        /// <param name="exifExposureTime">Camera&#39;s exposure time (Optional) (optional)</param>
        /// <param name="exifApertureValue">Camera&#39;s aperture value (Optional) (optional)</param>
        /// <param name="exifFocalLength">Camera&#39;s focal length (Optional) (optional)</param>
        /// <param name="exifIsoSpeedRatings">Camera&#39;s iso (Optional) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Photo</returns>
        public async System.Threading.Tasks.Task<Photo> UpdatePhotoAsync(string id, string description = default(string), bool? showOnProfile = default(bool?), string tags = default(string), double? locationLatitude = default(double?), double? locationLongitude = default(double?), string locationName = default(string), string locationCity = default(string), string locationCountry = default(string), string exifMake = default(string), string exifModel = default(string), string exifExposureTime = default(string), string exifApertureValue = default(string), string exifFocalLength = default(string), string exifIsoSpeedRatings = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<Photo> localVarResponse = await UpdatePhotoWithHttpInfoAsync(id, description, showOnProfile, tags, locationLatitude, locationLongitude, locationName, locationCity, locationCountry, exifMake, exifModel, exifExposureTime, exifApertureValue, exifFocalLength, exifIsoSpeedRatings, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a photo Update a photo on behalf of the logged-in user. This requires the write_photos scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The photo&#39;s ID.</param>
        /// <param name="description">The photo&#39;s description (Optional). (optional)</param>
        /// <param name="showOnProfile">The photo&#39;s visibility (Optional). (optional)</param>
        /// <param name="tags">The photo&#39;s tags (Optional). (optional)</param>
        /// <param name="locationLatitude">The photo location&#39;s latitude rounded to 6 decimals. (Optional) (optional)</param>
        /// <param name="locationLongitude">The photo location&#39;s longitude rounded to 6 decimals. (Optional) (optional)</param>
        /// <param name="locationName">The photo&#39;s full location string (including city and country) (Optional) (optional)</param>
        /// <param name="locationCity">The photo location&#39;s city (Optional) (optional)</param>
        /// <param name="locationCountry">The photo location&#39;s country (Optional) (optional)</param>
        /// <param name="exifMake">Camera&#39;s brand (Optional) (optional)</param>
        /// <param name="exifModel">Camera&#39;s model (Optional) (optional)</param>
        /// <param name="exifExposureTime">Camera&#39;s exposure time (Optional) (optional)</param>
        /// <param name="exifApertureValue">Camera&#39;s aperture value (Optional) (optional)</param>
        /// <param name="exifFocalLength">Camera&#39;s focal length (Optional) (optional)</param>
        /// <param name="exifIsoSpeedRatings">Camera&#39;s iso (Optional) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Photo)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<Photo>> UpdatePhotoWithHttpInfoAsync(string id, string description = default(string), bool? showOnProfile = default(bool?), string tags = default(string), double? locationLatitude = default(double?), double? locationLongitude = default(double?), string locationName = default(string), string locationCity = default(string), string locationCountry = default(string), string exifMake = default(string), string exifModel = default(string), string exifExposureTime = default(string), string exifApertureValue = default(string), string exifFocalLength = default(string), string exifIsoSpeedRatings = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PhotosApi->UpdatePhoto");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (showOnProfile != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "show_on_profile", showOnProfile));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (locationLatitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "location[latitude]", locationLatitude));
            }
            if (locationLongitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "location[longitude]", locationLongitude));
            }
            if (locationName != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "location[name]", locationName));
            }
            if (locationCity != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "location[city]", locationCity));
            }
            if (locationCountry != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "location[country]", locationCountry));
            }
            if (exifMake != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "exif[make]", exifMake));
            }
            if (exifModel != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "exif[model]", exifModel));
            }
            if (exifExposureTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "exif[exposure_time]", exifExposureTime));
            }
            if (exifApertureValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "exif[aperture_value]", exifApertureValue));
            }
            if (exifFocalLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "exif[focal_length]", exifFocalLength));
            }
            if (exifIsoSpeedRatings != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "exif[iso_speed_ratings]", exifIsoSpeedRatings));
            }

            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Photo>("/photos/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePhoto", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
