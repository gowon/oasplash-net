/*
 * Unsplash API
 *
 * This document describes the resources that make up the official Unsplash JSON API. 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using OASPlash.Core.Client;
using OASPlash.Core.Model;

namespace OASPlash.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a photo to a collection
        /// </summary>
        /// <remarks>
        /// Add a photo to one of the logged-in user&#39;s collections. Requires the write_collections scope. If the photo is already in the collection, this action has no effect.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection&#39;s ID.</param>
        /// <param name="photoId">The photo&#39;s ID.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse AddPhotoToCollection(string collectionId, string photoId);

        /// <summary>
        /// Add a photo to a collection
        /// </summary>
        /// <remarks>
        /// Add a photo to one of the logged-in user&#39;s collections. Requires the write_collections scope. If the photo is already in the collection, this action has no effect.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection&#39;s ID.</param>
        /// <param name="photoId">The photo&#39;s ID.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> AddPhotoToCollectionWithHttpInfo(string collectionId, string photoId);
        /// <summary>
        /// Create a new collection
        /// </summary>
        /// <remarks>
        /// Create a new collection. This requires the write_collections scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the collection.</param>
        /// <param name="description">The collection&#39;s description. (Optional.) (optional)</param>
        /// <param name="_private">Whether to make this collection private. (Optional; default false). (optional)</param>
        /// <returns>Collection</returns>
        Collection CreateNewCollection(string title, string description = default(string), bool? _private = default(bool?));

        /// <summary>
        /// Create a new collection
        /// </summary>
        /// <remarks>
        /// Create a new collection. This requires the write_collections scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the collection.</param>
        /// <param name="description">The collection&#39;s description. (Optional.) (optional)</param>
        /// <param name="_private">Whether to make this collection private. (Optional; default false). (optional)</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> CreateNewCollectionWithHttpInfo(string title, string description = default(string), bool? _private = default(bool?));
        /// <summary>
        /// Delete a collection
        /// </summary>
        /// <remarks>
        /// Delete a collection belonging to the logged-in user. This requires the write_collections scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <returns></returns>
        void DeleteCollectionById(string id);

        /// <summary>
        /// Delete a collection
        /// </summary>
        /// <remarks>
        /// Delete a collection belonging to the logged-in user. This requires the write_collections scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCollectionByIdWithHttpInfo(string id);
        /// <summary>
        /// Get a collection
        /// </summary>
        /// <remarks>
        /// Retrieve a single collection. To view a user&#39;s private collections, the read_collections scope is required.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collections&#39;s ID.</param>
        /// <returns>Collection</returns>
        Collection GetCollectionById(string id);

        /// <summary>
        /// Get a collection
        /// </summary>
        /// <remarks>
        /// Retrieve a single collection. To view a user&#39;s private collections, the read_collections scope is required.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collections&#39;s ID.</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> GetCollectionByIdWithHttpInfo(string id);
        /// <summary>
        /// Get a collection&#39;s photos
        /// </summary>
        /// <remarks>
        /// Retrieve a collection&#39;s photos.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <returns>List&lt;Photo&gt;</returns>
        List<Photo> GetCollectionPhotos(string id, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?));

        /// <summary>
        /// Get a collection&#39;s photos
        /// </summary>
        /// <remarks>
        /// Retrieve a collection&#39;s photos.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Photo&gt;</returns>
        ApiResponse<List<Photo>> GetCollectionPhotosWithHttpInfo(string id, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?));
        /// <summary>
        /// List collections
        /// </summary>
        /// <remarks>
        /// Get a single page from the list of all collections.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <returns>List&lt;Collection&gt;</returns>
        List<Collection> GetCollections(int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// List collections
        /// </summary>
        /// <remarks>
        /// Get a single page from the list of all collections.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        ApiResponse<List<Collection>> GetCollectionsWithHttpInfo(int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// List a collection&#39;s related collections
        /// </summary>
        /// <remarks>
        /// Retrieve a list of collections related to this one.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <returns>List&lt;Collection&gt;</returns>
        List<Collection> GetRelatedCollections(string id);

        /// <summary>
        /// List a collection&#39;s related collections
        /// </summary>
        /// <remarks>
        /// Retrieve a list of collections related to this one.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        ApiResponse<List<Collection>> GetRelatedCollectionsWithHttpInfo(string id);
        /// <summary>
        /// Remove a photo from a collection
        /// </summary>
        /// <remarks>
        /// Remove a photo from one of the logged-in user&#39;s collections. Requires the write_collections scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection&#39;s ID.</param>
        /// <param name="photoId">The photo&#39;s ID.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse RemovePhotoFromCollection(string collectionId, string photoId);

        /// <summary>
        /// Remove a photo from a collection
        /// </summary>
        /// <remarks>
        /// Remove a photo from one of the logged-in user&#39;s collections. Requires the write_collections scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection&#39;s ID.</param>
        /// <param name="photoId">The photo&#39;s ID.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> RemovePhotoFromCollectionWithHttpInfo(string collectionId, string photoId);
        /// <summary>
        /// Update an existing collection
        /// </summary>
        /// <remarks>
        /// Update an existing collection belonging to the logged-in user. This requires the write_collections scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="title">The title of the collection. (Optional.) (optional)</param>
        /// <param name="description">The collection&#39;s description. (Optional.) (optional)</param>
        /// <param name="_private">Whether to make this collection private. (Optional.) (optional)</param>
        /// <returns>Collection</returns>
        Collection UpdateCollection(string id, string title = default(string), string description = default(string), bool? _private = default(bool?));

        /// <summary>
        /// Update an existing collection
        /// </summary>
        /// <remarks>
        /// Update an existing collection belonging to the logged-in user. This requires the write_collections scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="title">The title of the collection. (Optional.) (optional)</param>
        /// <param name="description">The collection&#39;s description. (Optional.) (optional)</param>
        /// <param name="_private">Whether to make this collection private. (Optional.) (optional)</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> UpdateCollectionWithHttpInfo(string id, string title = default(string), string description = default(string), bool? _private = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a photo to a collection
        /// </summary>
        /// <remarks>
        /// Add a photo to one of the logged-in user&#39;s collections. Requires the write_collections scope. If the photo is already in the collection, this action has no effect.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection&#39;s ID.</param>
        /// <param name="photoId">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> AddPhotoToCollectionAsync(string collectionId, string photoId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a photo to a collection
        /// </summary>
        /// <remarks>
        /// Add a photo to one of the logged-in user&#39;s collections. Requires the write_collections scope. If the photo is already in the collection, this action has no effect.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection&#39;s ID.</param>
        /// <param name="photoId">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> AddPhotoToCollectionWithHttpInfoAsync(string collectionId, string photoId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new collection
        /// </summary>
        /// <remarks>
        /// Create a new collection. This requires the write_collections scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the collection.</param>
        /// <param name="description">The collection&#39;s description. (Optional.) (optional)</param>
        /// <param name="_private">Whether to make this collection private. (Optional; default false). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> CreateNewCollectionAsync(string title, string description = default(string), bool? _private = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new collection
        /// </summary>
        /// <remarks>
        /// Create a new collection. This requires the write_collections scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the collection.</param>
        /// <param name="description">The collection&#39;s description. (Optional.) (optional)</param>
        /// <param name="_private">Whether to make this collection private. (Optional; default false). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> CreateNewCollectionWithHttpInfoAsync(string title, string description = default(string), bool? _private = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a collection
        /// </summary>
        /// <remarks>
        /// Delete a collection belonging to the logged-in user. This requires the write_collections scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCollectionByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a collection
        /// </summary>
        /// <remarks>
        /// Delete a collection belonging to the logged-in user. This requires the write_collections scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCollectionByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a collection
        /// </summary>
        /// <remarks>
        /// Retrieve a single collection. To view a user&#39;s private collections, the read_collections scope is required.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collections&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> GetCollectionByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a collection
        /// </summary>
        /// <remarks>
        /// Retrieve a single collection. To view a user&#39;s private collections, the read_collections scope is required.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collections&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> GetCollectionByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a collection&#39;s photos
        /// </summary>
        /// <remarks>
        /// Retrieve a collection&#39;s photos.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Photo&gt;</returns>
        System.Threading.Tasks.Task<List<Photo>> GetCollectionPhotosAsync(string id, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a collection&#39;s photos
        /// </summary>
        /// <remarks>
        /// Retrieve a collection&#39;s photos.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Photo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Photo>>> GetCollectionPhotosWithHttpInfoAsync(string id, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List collections
        /// </summary>
        /// <remarks>
        /// Get a single page from the list of all collections.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        System.Threading.Tasks.Task<List<Collection>> GetCollectionsAsync(int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List collections
        /// </summary>
        /// <remarks>
        /// Get a single page from the list of all collections.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Collection>>> GetCollectionsWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List a collection&#39;s related collections
        /// </summary>
        /// <remarks>
        /// Retrieve a list of collections related to this one.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        System.Threading.Tasks.Task<List<Collection>> GetRelatedCollectionsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List a collection&#39;s related collections
        /// </summary>
        /// <remarks>
        /// Retrieve a list of collections related to this one.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Collection>>> GetRelatedCollectionsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a photo from a collection
        /// </summary>
        /// <remarks>
        /// Remove a photo from one of the logged-in user&#39;s collections. Requires the write_collections scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection&#39;s ID.</param>
        /// <param name="photoId">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> RemovePhotoFromCollectionAsync(string collectionId, string photoId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a photo from a collection
        /// </summary>
        /// <remarks>
        /// Remove a photo from one of the logged-in user&#39;s collections. Requires the write_collections scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection&#39;s ID.</param>
        /// <param name="photoId">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> RemovePhotoFromCollectionWithHttpInfoAsync(string collectionId, string photoId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing collection
        /// </summary>
        /// <remarks>
        /// Update an existing collection belonging to the logged-in user. This requires the write_collections scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="title">The title of the collection. (Optional.) (optional)</param>
        /// <param name="description">The collection&#39;s description. (Optional.) (optional)</param>
        /// <param name="_private">Whether to make this collection private. (Optional.) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> UpdateCollectionAsync(string id, string title = default(string), string description = default(string), bool? _private = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing collection
        /// </summary>
        /// <remarks>
        /// Update an existing collection belonging to the logged-in user. This requires the write_collections scope.
        /// </remarks>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="title">The title of the collection. (Optional.) (optional)</param>
        /// <param name="description">The collection&#39;s description. (Optional.) (optional)</param>
        /// <param name="_private">Whether to make this collection private. (Optional.) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> UpdateCollectionWithHttpInfoAsync(string id, string title = default(string), string description = default(string), bool? _private = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionsApi : ICollectionsApiSync, ICollectionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CollectionsApi : IDisposable, ICollectionsApi
    {
        private OASPlash.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public CollectionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public CollectionsApi(string basePath)
        {
            this.Configuration = OASPlash.Core.Client.Configuration.MergeConfigurations(
                OASPlash.Core.Client.GlobalConfiguration.Instance,
                new OASPlash.Core.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new OASPlash.Core.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public CollectionsApi(OASPlash.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OASPlash.Core.Client.Configuration.MergeConfigurations(
                OASPlash.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new OASPlash.Core.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CollectionsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CollectionsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = OASPlash.Core.Client.Configuration.MergeConfigurations(
                OASPlash.Core.Client.GlobalConfiguration.Instance,
                new OASPlash.Core.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new OASPlash.Core.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CollectionsApi(HttpClient client, OASPlash.Core.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = OASPlash.Core.Client.Configuration.MergeConfigurations(
                OASPlash.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new OASPlash.Core.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public CollectionsApi(OASPlash.Core.Client.ISynchronousClient client, OASPlash.Core.Client.IAsynchronousClient asyncClient, OASPlash.Core.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OASPlash.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public OASPlash.Core.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OASPlash.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OASPlash.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OASPlash.Core.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OASPlash.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a photo to a collection Add a photo to one of the logged-in user&#39;s collections. Requires the write_collections scope. If the photo is already in the collection, this action has no effect.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection&#39;s ID.</param>
        /// <param name="photoId">The photo&#39;s ID.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse AddPhotoToCollection(string collectionId, string photoId)
        {
            OASPlash.Core.Client.ApiResponse<OperationResponse> localVarResponse = AddPhotoToCollectionWithHttpInfo(collectionId, photoId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a photo to a collection Add a photo to one of the logged-in user&#39;s collections. Requires the write_collections scope. If the photo is already in the collection, this action has no effect.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection&#39;s ID.</param>
        /// <param name="photoId">The photo&#39;s ID.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public OASPlash.Core.Client.ApiResponse<OperationResponse> AddPhotoToCollectionWithHttpInfo(string collectionId, string photoId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->AddPhotoToCollection");

            // verify the required parameter 'photoId' is set
            if (photoId == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'photoId' when calling CollectionsApi->AddPhotoToCollection");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collection_id", OASPlash.Core.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "photo_id", photoId));

            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/collections/{collection_id}/add", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPhotoToCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a photo to a collection Add a photo to one of the logged-in user&#39;s collections. Requires the write_collections scope. If the photo is already in the collection, this action has no effect.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection&#39;s ID.</param>
        /// <param name="photoId">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> AddPhotoToCollectionAsync(string collectionId, string photoId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<OperationResponse> localVarResponse = await AddPhotoToCollectionWithHttpInfoAsync(collectionId, photoId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a photo to a collection Add a photo to one of the logged-in user&#39;s collections. Requires the write_collections scope. If the photo is already in the collection, this action has no effect.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection&#39;s ID.</param>
        /// <param name="photoId">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<OperationResponse>> AddPhotoToCollectionWithHttpInfoAsync(string collectionId, string photoId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->AddPhotoToCollection");

            // verify the required parameter 'photoId' is set
            if (photoId == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'photoId' when calling CollectionsApi->AddPhotoToCollection");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collection_id", OASPlash.Core.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "photo_id", photoId));

            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/collections/{collection_id}/add", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPhotoToCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new collection Create a new collection. This requires the write_collections scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the collection.</param>
        /// <param name="description">The collection&#39;s description. (Optional.) (optional)</param>
        /// <param name="_private">Whether to make this collection private. (Optional; default false). (optional)</param>
        /// <returns>Collection</returns>
        public Collection CreateNewCollection(string title, string description = default(string), bool? _private = default(bool?))
        {
            OASPlash.Core.Client.ApiResponse<Collection> localVarResponse = CreateNewCollectionWithHttpInfo(title, description, _private);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new collection Create a new collection. This requires the write_collections scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the collection.</param>
        /// <param name="description">The collection&#39;s description. (Optional.) (optional)</param>
        /// <param name="_private">Whether to make this collection private. (Optional; default false). (optional)</param>
        /// <returns>ApiResponse of Collection</returns>
        public OASPlash.Core.Client.ApiResponse<Collection> CreateNewCollectionWithHttpInfo(string title, string description = default(string), bool? _private = default(bool?))
        {
            // verify the required parameter 'title' is set
            if (title == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'title' when calling CollectionsApi->CreateNewCollection");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (_private != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "private", _private));
            }

            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Collection>("/collections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new collection Create a new collection. This requires the write_collections scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the collection.</param>
        /// <param name="description">The collection&#39;s description. (Optional.) (optional)</param>
        /// <param name="_private">Whether to make this collection private. (Optional; default false). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> CreateNewCollectionAsync(string title, string description = default(string), bool? _private = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<Collection> localVarResponse = await CreateNewCollectionWithHttpInfoAsync(title, description, _private, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new collection Create a new collection. This requires the write_collections scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the collection.</param>
        /// <param name="description">The collection&#39;s description. (Optional.) (optional)</param>
        /// <param name="_private">Whether to make this collection private. (Optional; default false). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<Collection>> CreateNewCollectionWithHttpInfoAsync(string title, string description = default(string), bool? _private = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'title' is set
            if (title == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'title' when calling CollectionsApi->CreateNewCollection");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (_private != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "private", _private));
            }

            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Collection>("/collections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a collection Delete a collection belonging to the logged-in user. This requires the write_collections scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <returns></returns>
        public void DeleteCollectionById(string id)
        {
            DeleteCollectionByIdWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a collection Delete a collection belonging to the logged-in user. This requires the write_collections scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OASPlash.Core.Client.ApiResponse<Object> DeleteCollectionByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling CollectionsApi->DeleteCollectionById");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/collections/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCollectionById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a collection Delete a collection belonging to the logged-in user. This requires the write_collections scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCollectionByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCollectionByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a collection Delete a collection belonging to the logged-in user. This requires the write_collections scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<Object>> DeleteCollectionByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling CollectionsApi->DeleteCollectionById");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/collections/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCollectionById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a collection Retrieve a single collection. To view a user&#39;s private collections, the read_collections scope is required.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collections&#39;s ID.</param>
        /// <returns>Collection</returns>
        public Collection GetCollectionById(string id)
        {
            OASPlash.Core.Client.ApiResponse<Collection> localVarResponse = GetCollectionByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a collection Retrieve a single collection. To view a user&#39;s private collections, the read_collections scope is required.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collections&#39;s ID.</param>
        /// <returns>ApiResponse of Collection</returns>
        public OASPlash.Core.Client.ApiResponse<Collection> GetCollectionByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling CollectionsApi->GetCollectionById");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Collection>("/collections/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a collection Retrieve a single collection. To view a user&#39;s private collections, the read_collections scope is required.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collections&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> GetCollectionByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<Collection> localVarResponse = await GetCollectionByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a collection Retrieve a single collection. To view a user&#39;s private collections, the read_collections scope is required.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collections&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<Collection>> GetCollectionByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling CollectionsApi->GetCollectionById");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Collection>("/collections/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a collection&#39;s photos Retrieve a collection&#39;s photos.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <returns>List&lt;Photo&gt;</returns>
        public List<Photo> GetCollectionPhotos(string id, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?))
        {
            OASPlash.Core.Client.ApiResponse<List<Photo>> localVarResponse = GetCollectionPhotosWithHttpInfo(id, page, perPage, orientation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a collection&#39;s photos Retrieve a collection&#39;s photos.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Photo&gt;</returns>
        public OASPlash.Core.Client.ApiResponse<List<Photo>> GetCollectionPhotosWithHttpInfo(string id, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling CollectionsApi->GetCollectionPhotos");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (orientation != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "orientation", orientation));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Photo>>("/collections/{id}/photos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionPhotos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a collection&#39;s photos Retrieve a collection&#39;s photos.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Photo&gt;</returns>
        public async System.Threading.Tasks.Task<List<Photo>> GetCollectionPhotosAsync(string id, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<List<Photo>> localVarResponse = await GetCollectionPhotosWithHttpInfoAsync(id, page, perPage, orientation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a collection&#39;s photos Retrieve a collection&#39;s photos.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="orientation">Filter by photo orientation. Optional. (Valid values: landscape, portrait, squarish)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Photo&gt;)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<List<Photo>>> GetCollectionPhotosWithHttpInfoAsync(string id, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling CollectionsApi->GetCollectionPhotos");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (orientation != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "orientation", orientation));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Photo>>("/collections/{id}/photos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionPhotos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List collections Get a single page from the list of all collections.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <returns>List&lt;Collection&gt;</returns>
        public List<Collection> GetCollections(int? page = default(int?), int? perPage = default(int?))
        {
            OASPlash.Core.Client.ApiResponse<List<Collection>> localVarResponse = GetCollectionsWithHttpInfo(page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List collections Get a single page from the list of all collections.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        public OASPlash.Core.Client.ApiResponse<List<Collection>> GetCollectionsWithHttpInfo(int? page = default(int?), int? perPage = default(int?))
        {
            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Collection>>("/collections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List collections Get a single page from the list of all collections.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        public async System.Threading.Tasks.Task<List<Collection>> GetCollectionsAsync(int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<List<Collection>> localVarResponse = await GetCollectionsWithHttpInfoAsync(page, perPage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List collections Get a single page from the list of all collections.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve. (Optional, default: 1)  (optional)</param>
        /// <param name="perPage">Number of items per page. (Optional; default: 10)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<List<Collection>>> GetCollectionsWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Collection>>("/collections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a collection&#39;s related collections Retrieve a list of collections related to this one.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <returns>List&lt;Collection&gt;</returns>
        public List<Collection> GetRelatedCollections(string id)
        {
            OASPlash.Core.Client.ApiResponse<List<Collection>> localVarResponse = GetRelatedCollectionsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a collection&#39;s related collections Retrieve a list of collections related to this one.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        public OASPlash.Core.Client.ApiResponse<List<Collection>> GetRelatedCollectionsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling CollectionsApi->GetRelatedCollections");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Collection>>("/collections/{id}/related", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRelatedCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a collection&#39;s related collections Retrieve a list of collections related to this one.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        public async System.Threading.Tasks.Task<List<Collection>> GetRelatedCollectionsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<List<Collection>> localVarResponse = await GetRelatedCollectionsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a collection&#39;s related collections Retrieve a list of collections related to this one.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<List<Collection>>> GetRelatedCollectionsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling CollectionsApi->GetRelatedCollections");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (publicAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Collection>>("/collections/{id}/related", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRelatedCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a photo from a collection Remove a photo from one of the logged-in user&#39;s collections. Requires the write_collections scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection&#39;s ID.</param>
        /// <param name="photoId">The photo&#39;s ID.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse RemovePhotoFromCollection(string collectionId, string photoId)
        {
            OASPlash.Core.Client.ApiResponse<OperationResponse> localVarResponse = RemovePhotoFromCollectionWithHttpInfo(collectionId, photoId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a photo from a collection Remove a photo from one of the logged-in user&#39;s collections. Requires the write_collections scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection&#39;s ID.</param>
        /// <param name="photoId">The photo&#39;s ID.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public OASPlash.Core.Client.ApiResponse<OperationResponse> RemovePhotoFromCollectionWithHttpInfo(string collectionId, string photoId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->RemovePhotoFromCollection");

            // verify the required parameter 'photoId' is set
            if (photoId == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'photoId' when calling CollectionsApi->RemovePhotoFromCollection");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collection_id", OASPlash.Core.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "photo_id", photoId));

            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<OperationResponse>("/collections/{collection_id}/remove", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemovePhotoFromCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a photo from a collection Remove a photo from one of the logged-in user&#39;s collections. Requires the write_collections scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection&#39;s ID.</param>
        /// <param name="photoId">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> RemovePhotoFromCollectionAsync(string collectionId, string photoId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<OperationResponse> localVarResponse = await RemovePhotoFromCollectionWithHttpInfoAsync(collectionId, photoId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a photo from a collection Remove a photo from one of the logged-in user&#39;s collections. Requires the write_collections scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection&#39;s ID.</param>
        /// <param name="photoId">The photo&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<OperationResponse>> RemovePhotoFromCollectionWithHttpInfoAsync(string collectionId, string photoId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->RemovePhotoFromCollection");

            // verify the required parameter 'photoId' is set
            if (photoId == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'photoId' when calling CollectionsApi->RemovePhotoFromCollection");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collection_id", OASPlash.Core.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "photo_id", photoId));

            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<OperationResponse>("/collections/{collection_id}/remove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemovePhotoFromCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing collection Update an existing collection belonging to the logged-in user. This requires the write_collections scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="title">The title of the collection. (Optional.) (optional)</param>
        /// <param name="description">The collection&#39;s description. (Optional.) (optional)</param>
        /// <param name="_private">Whether to make this collection private. (Optional.) (optional)</param>
        /// <returns>Collection</returns>
        public Collection UpdateCollection(string id, string title = default(string), string description = default(string), bool? _private = default(bool?))
        {
            OASPlash.Core.Client.ApiResponse<Collection> localVarResponse = UpdateCollectionWithHttpInfo(id, title, description, _private);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing collection Update an existing collection belonging to the logged-in user. This requires the write_collections scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="title">The title of the collection. (Optional.) (optional)</param>
        /// <param name="description">The collection&#39;s description. (Optional.) (optional)</param>
        /// <param name="_private">Whether to make this collection private. (Optional.) (optional)</param>
        /// <returns>ApiResponse of Collection</returns>
        public OASPlash.Core.Client.ApiResponse<Collection> UpdateCollectionWithHttpInfo(string id, string title = default(string), string description = default(string), bool? _private = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling CollectionsApi->UpdateCollection");

            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (title != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (_private != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "private", _private));
            }

            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Collection>("/collections/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing collection Update an existing collection belonging to the logged-in user. This requires the write_collections scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="title">The title of the collection. (Optional.) (optional)</param>
        /// <param name="description">The collection&#39;s description. (Optional.) (optional)</param>
        /// <param name="_private">Whether to make this collection private. (Optional.) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> UpdateCollectionAsync(string id, string title = default(string), string description = default(string), bool? _private = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OASPlash.Core.Client.ApiResponse<Collection> localVarResponse = await UpdateCollectionWithHttpInfoAsync(id, title, description, _private, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing collection Update an existing collection belonging to the logged-in user. This requires the write_collections scope.
        /// </summary>
        /// <exception cref="OASPlash.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The collection&#39;s ID.</param>
        /// <param name="title">The title of the collection. (Optional.) (optional)</param>
        /// <param name="description">The collection&#39;s description. (Optional.) (optional)</param>
        /// <param name="_private">Whether to make this collection private. (Optional.) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<OASPlash.Core.Client.ApiResponse<Collection>> UpdateCollectionWithHttpInfoAsync(string id, string title = default(string), string description = default(string), bool? _private = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new OASPlash.Core.Client.ApiException(400, "Missing required parameter 'id' when calling CollectionsApi->UpdateCollection");


            OASPlash.Core.Client.RequestOptions localVarRequestOptions = new OASPlash.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OASPlash.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OASPlash.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", OASPlash.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (title != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (_private != null)
            {
                localVarRequestOptions.QueryParameters.Add(OASPlash.Core.Client.ClientUtils.ParameterToMultiMap("", "private", _private));
            }

            // authentication (userAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Collection>("/collections/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
