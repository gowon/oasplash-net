/*
 * Unsplash API
 *
 * This document describes the resources that make up the official Unsplash JSON API. 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = OASPlash.Core.Client.FileParameter;
using OpenAPIDateConverter = OASPlash.Core.Client.OpenAPIDateConverter;

namespace OASPlash.Core.Model
{
    /// <summary>
    /// UserHistoricalData
    /// </summary>
    [DataContract(Name = "UserHistoricalData")]
    public partial class UserHistoricalData : IEquatable<UserHistoricalData>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Resolution
        /// </summary>
        [DataMember(Name = "resolution", EmitDefaultValue = false)]
        public StatResolution? Resolution { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserHistoricalData" /> class.
        /// </summary>
        /// <param name="change">change.</param>
        /// <param name="average">average.</param>
        /// <param name="resolution">resolution.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="values">values.</param>
        public UserHistoricalData(int change = default(int), int average = default(int), StatResolution? resolution = default(StatResolution?), int quantity = default(int), List<PhotoHistoricalDataValues> values = default(List<PhotoHistoricalDataValues>))
        {
            this.Change = change;
            this.Average = average;
            this.Resolution = resolution;
            this.Quantity = quantity;
            this.Values = values;
        }

        /// <summary>
        /// Gets or Sets Change
        /// </summary>
        [DataMember(Name = "change", EmitDefaultValue = false)]
        public int Change { get; set; }

        /// <summary>
        /// Gets or Sets Average
        /// </summary>
        [DataMember(Name = "average", EmitDefaultValue = false)]
        public int Average { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        public List<PhotoHistoricalDataValues> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserHistoricalData {\n");
            sb.Append("  Change: ").Append(Change).Append("\n");
            sb.Append("  Average: ").Append(Average).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserHistoricalData);
        }

        /// <summary>
        /// Returns true if UserHistoricalData instances are equal
        /// </summary>
        /// <param name="input">Instance of UserHistoricalData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserHistoricalData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Change == input.Change ||
                    this.Change.Equals(input.Change)
                ) && 
                (
                    this.Average == input.Average ||
                    this.Average.Equals(input.Average)
                ) && 
                (
                    this.Resolution == input.Resolution ||
                    this.Resolution.Equals(input.Resolution)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Change.GetHashCode();
                hashCode = (hashCode * 59) + this.Average.GetHashCode();
                hashCode = (hashCode * 59) + this.Resolution.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.Values != null)
                {
                    hashCode = (hashCode * 59) + this.Values.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
