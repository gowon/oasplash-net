/*
 * Unsplash API
 *
 * This document describes the resources that make up the official Unsplash JSON API. 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = OASPlash.Core.Client.FileParameter;
using OpenAPIDateConverter = OASPlash.Core.Client.OpenAPIDateConverter;

namespace OASPlash.Core.Model
{
    /// <summary>
    /// PhotoStatistics
    /// </summary>
    [DataContract(Name = "PhotoStatistics")]
    public partial class PhotoStatistics : IEquatable<PhotoStatistics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhotoStatistics" /> class.
        /// </summary>
        /// <param name="downloads">downloads.</param>
        /// <param name="id">id.</param>
        /// <param name="likes">likes.</param>
        /// <param name="views">views.</param>
        public PhotoStatistics(PhotoStatisticsDownloads downloads = default(PhotoStatisticsDownloads), string id = default(string), PhotoStatisticsDownloads likes = default(PhotoStatisticsDownloads), PhotoStatisticsDownloads views = default(PhotoStatisticsDownloads))
        {
            this.Downloads = downloads;
            this.Id = id;
            this.Likes = likes;
            this.Views = views;
        }

        /// <summary>
        /// Gets or Sets Downloads
        /// </summary>
        [DataMember(Name = "downloads", EmitDefaultValue = false)]
        public PhotoStatisticsDownloads Downloads { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Likes
        /// </summary>
        [DataMember(Name = "likes", EmitDefaultValue = false)]
        public PhotoStatisticsDownloads Likes { get; set; }

        /// <summary>
        /// Gets or Sets Views
        /// </summary>
        [DataMember(Name = "views", EmitDefaultValue = false)]
        public PhotoStatisticsDownloads Views { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PhotoStatistics {\n");
            sb.Append("  Downloads: ").Append(Downloads).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Likes: ").Append(Likes).Append("\n");
            sb.Append("  Views: ").Append(Views).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhotoStatistics);
        }

        /// <summary>
        /// Returns true if PhotoStatistics instances are equal
        /// </summary>
        /// <param name="input">Instance of PhotoStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhotoStatistics input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Downloads == input.Downloads ||
                    (this.Downloads != null &&
                    this.Downloads.Equals(input.Downloads))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Likes == input.Likes ||
                    (this.Likes != null &&
                    this.Likes.Equals(input.Likes))
                ) && 
                (
                    this.Views == input.Views ||
                    (this.Views != null &&
                    this.Views.Equals(input.Views))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Downloads != null)
                {
                    hashCode = (hashCode * 59) + this.Downloads.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Likes != null)
                {
                    hashCode = (hashCode * 59) + this.Likes.GetHashCode();
                }
                if (this.Views != null)
                {
                    hashCode = (hashCode * 59) + this.Views.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
