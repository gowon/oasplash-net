/*
 * Unsplash API
 *
 * This document describes the resources that make up the official Unsplash JSON API. 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = OASPlash.Core.Client.FileParameter;
using OpenAPIDateConverter = OASPlash.Core.Client.OpenAPIDateConverter;

namespace OASPlash.Core.Model
{
    /// <summary>
    /// Photo
    /// </summary>
    [DataContract(Name = "Photo")]
    public partial class Photo : IEquatable<Photo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Photo" /> class.
        /// </summary>
        /// <param name="blurHash">blurHash.</param>
        /// <param name="color">color.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="currentUserCollections">currentUserCollections.</param>
        /// <param name="description">description.</param>
        /// <param name="downloads">downloads.</param>
        /// <param name="exif">exif.</param>
        /// <param name="height">height.</param>
        /// <param name="id">id.</param>
        /// <param name="likedByUser">likedByUser.</param>
        /// <param name="likes">likes.</param>
        /// <param name="links">links.</param>
        /// <param name="location">location.</param>
        /// <param name="tags">tags.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="urls">urls.</param>
        /// <param name="user">user.</param>
        /// <param name="width">width.</param>
        public Photo(string blurHash = default(string), string color = default(string), DateTime createdAt = default(DateTime), List<Collection> currentUserCollections = default(List<Collection>), string description = default(string), int downloads = default(int), Exif exif = default(Exif), int height = default(int), string id = default(string), bool likedByUser = default(bool), int likes = default(int), PhotoLinks links = default(PhotoLinks), Location location = default(Location), List<PhotoTags> tags = default(List<PhotoTags>), DateTime updatedAt = default(DateTime), PhotoUrls urls = default(PhotoUrls), User user = default(User), int width = default(int))
        {
            this.BlurHash = blurHash;
            this.Color = color;
            this.CreatedAt = createdAt;
            this.CurrentUserCollections = currentUserCollections;
            this.Description = description;
            this.Downloads = downloads;
            this.Exif = exif;
            this.Height = height;
            this.Id = id;
            this.LikedByUser = likedByUser;
            this.Likes = likes;
            this.Links = links;
            this.Location = location;
            this.Tags = tags;
            this.UpdatedAt = updatedAt;
            this.Urls = urls;
            this.User = user;
            this.Width = width;
        }

        /// <summary>
        /// Gets or Sets BlurHash
        /// </summary>
        [DataMember(Name = "blur_hash", EmitDefaultValue = false)]
        public string BlurHash { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CurrentUserCollections
        /// </summary>
        [DataMember(Name = "current_user_collections", EmitDefaultValue = false)]
        public List<Collection> CurrentUserCollections { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Downloads
        /// </summary>
        [DataMember(Name = "downloads", EmitDefaultValue = false)]
        public int Downloads { get; set; }

        /// <summary>
        /// Gets or Sets Exif
        /// </summary>
        [DataMember(Name = "exif", EmitDefaultValue = false)]
        public Exif Exif { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LikedByUser
        /// </summary>
        [DataMember(Name = "liked_by_user", EmitDefaultValue = true)]
        public bool LikedByUser { get; set; }

        /// <summary>
        /// Gets or Sets Likes
        /// </summary>
        [DataMember(Name = "likes", EmitDefaultValue = false)]
        public int Likes { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public PhotoLinks Links { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<PhotoTags> Tags { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name = "urls", EmitDefaultValue = false)]
        public PhotoUrls Urls { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public User User { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Photo {\n");
            sb.Append("  BlurHash: ").Append(BlurHash).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CurrentUserCollections: ").Append(CurrentUserCollections).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Downloads: ").Append(Downloads).Append("\n");
            sb.Append("  Exif: ").Append(Exif).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LikedByUser: ").Append(LikedByUser).Append("\n");
            sb.Append("  Likes: ").Append(Likes).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Photo);
        }

        /// <summary>
        /// Returns true if Photo instances are equal
        /// </summary>
        /// <param name="input">Instance of Photo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Photo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BlurHash == input.BlurHash ||
                    (this.BlurHash != null &&
                    this.BlurHash.Equals(input.BlurHash))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CurrentUserCollections == input.CurrentUserCollections ||
                    this.CurrentUserCollections != null &&
                    input.CurrentUserCollections != null &&
                    this.CurrentUserCollections.SequenceEqual(input.CurrentUserCollections)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Downloads == input.Downloads ||
                    this.Downloads.Equals(input.Downloads)
                ) && 
                (
                    this.Exif == input.Exif ||
                    (this.Exif != null &&
                    this.Exif.Equals(input.Exif))
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LikedByUser == input.LikedByUser ||
                    this.LikedByUser.Equals(input.LikedByUser)
                ) && 
                (
                    this.Likes == input.Likes ||
                    this.Likes.Equals(input.Likes)
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Urls == input.Urls ||
                    (this.Urls != null &&
                    this.Urls.Equals(input.Urls))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BlurHash != null)
                {
                    hashCode = (hashCode * 59) + this.BlurHash.GetHashCode();
                }
                if (this.Color != null)
                {
                    hashCode = (hashCode * 59) + this.Color.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.CurrentUserCollections != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentUserCollections.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Downloads.GetHashCode();
                if (this.Exif != null)
                {
                    hashCode = (hashCode * 59) + this.Exif.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LikedByUser.GetHashCode();
                hashCode = (hashCode * 59) + this.Likes.GetHashCode();
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Urls != null)
                {
                    hashCode = (hashCode * 59) + this.Urls.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
