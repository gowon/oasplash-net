/*
 * Unsplash API
 *
 * This document describes the resources that make up the official Unsplash JSON API. 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = OASPlash.Core.Client.FileParameter;
using OpenAPIDateConverter = OASPlash.Core.Client.OpenAPIDateConverter;

namespace OASPlash.Core.Model
{
    /// <summary>
    /// Exif
    /// </summary>
    [DataContract(Name = "Exif")]
    public partial class Exif : IEquatable<Exif>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Exif" /> class.
        /// </summary>
        /// <param name="make">make.</param>
        /// <param name="model">model.</param>
        /// <param name="exposureTime">exposureTime.</param>
        /// <param name="aperture">aperture.</param>
        /// <param name="focalLength">focalLength.</param>
        /// <param name="iso">iso.</param>
        public Exif(string make = default(string), string model = default(string), string exposureTime = default(string), double aperture = default(double), double focalLength = default(double), int iso = default(int))
        {
            this.Make = make;
            this.Model = model;
            this.ExposureTime = exposureTime;
            this.Aperture = aperture;
            this.FocalLength = focalLength;
            this.Iso = iso;
        }

        /// <summary>
        /// Gets or Sets Make
        /// </summary>
        [DataMember(Name = "make", EmitDefaultValue = false)]
        public string Make { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets ExposureTime
        /// </summary>
        [DataMember(Name = "exposure_time", EmitDefaultValue = false)]
        public string ExposureTime { get; set; }

        /// <summary>
        /// Gets or Sets Aperture
        /// </summary>
        [DataMember(Name = "aperture", EmitDefaultValue = false)]
        public double Aperture { get; set; }

        /// <summary>
        /// Gets or Sets FocalLength
        /// </summary>
        [DataMember(Name = "focal_length", EmitDefaultValue = false)]
        public double FocalLength { get; set; }

        /// <summary>
        /// Gets or Sets Iso
        /// </summary>
        [DataMember(Name = "iso", EmitDefaultValue = false)]
        public int Iso { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Exif {\n");
            sb.Append("  Make: ").Append(Make).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  ExposureTime: ").Append(ExposureTime).Append("\n");
            sb.Append("  Aperture: ").Append(Aperture).Append("\n");
            sb.Append("  FocalLength: ").Append(FocalLength).Append("\n");
            sb.Append("  Iso: ").Append(Iso).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Exif);
        }

        /// <summary>
        /// Returns true if Exif instances are equal
        /// </summary>
        /// <param name="input">Instance of Exif to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Exif input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Make == input.Make ||
                    (this.Make != null &&
                    this.Make.Equals(input.Make))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.ExposureTime == input.ExposureTime ||
                    (this.ExposureTime != null &&
                    this.ExposureTime.Equals(input.ExposureTime))
                ) && 
                (
                    this.Aperture == input.Aperture ||
                    this.Aperture.Equals(input.Aperture)
                ) && 
                (
                    this.FocalLength == input.FocalLength ||
                    this.FocalLength.Equals(input.FocalLength)
                ) && 
                (
                    this.Iso == input.Iso ||
                    this.Iso.Equals(input.Iso)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Make != null)
                {
                    hashCode = (hashCode * 59) + this.Make.GetHashCode();
                }
                if (this.Model != null)
                {
                    hashCode = (hashCode * 59) + this.Model.GetHashCode();
                }
                if (this.ExposureTime != null)
                {
                    hashCode = (hashCode * 59) + this.ExposureTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Aperture.GetHashCode();
                hashCode = (hashCode * 59) + this.FocalLength.GetHashCode();
                hashCode = (hashCode * 59) + this.Iso.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
