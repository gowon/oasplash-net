/*
 * Unsplash API
 *
 * This document describes the resources that make up the official Unsplash JSON API. 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = OASPlash.Core.Client.FileParameter;
using OpenAPIDateConverter = OASPlash.Core.Client.OpenAPIDateConverter;

namespace OASPlash.Core.Model
{
    /// <summary>
    /// Topic
    /// </summary>
    [DataContract(Name = "Topic")]
    public partial class Topic : IEquatable<Topic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Topic" /> class.
        /// </summary>
        /// <param name="converPhoto">converPhoto.</param>
        /// <param name="description">description.</param>
        /// <param name="endsAt">endsAt.</param>
        /// <param name="featured">featured.</param>
        /// <param name="id">id.</param>
        /// <param name="links">links.</param>
        /// <param name="onlySubmissionsAfter">onlySubmissionsAfter.</param>
        /// <param name="owners">owners.</param>
        /// <param name="publishedAt">publishedAt.</param>
        /// <param name="slug">slug.</param>
        /// <param name="startsAt">startsAt.</param>
        /// <param name="status">status.</param>
        /// <param name="title">title.</param>
        /// <param name="topContributors">topContributors.</param>
        /// <param name="totalPhotos">totalPhotos.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public Topic(Photo converPhoto = default(Photo), string description = default(string), string endsAt = default(string), bool featured = default(bool), string id = default(string), TopicLinks links = default(TopicLinks), string onlySubmissionsAfter = default(string), List<User> owners = default(List<User>), DateTime publishedAt = default(DateTime), string slug = default(string), DateTime startsAt = default(DateTime), string status = default(string), string title = default(string), List<User> topContributors = default(List<User>), int totalPhotos = default(int), DateTime updatedAt = default(DateTime))
        {
            this.ConverPhoto = converPhoto;
            this.Description = description;
            this.EndsAt = endsAt;
            this.Featured = featured;
            this.Id = id;
            this.Links = links;
            this.OnlySubmissionsAfter = onlySubmissionsAfter;
            this.Owners = owners;
            this.PublishedAt = publishedAt;
            this.Slug = slug;
            this.StartsAt = startsAt;
            this.Status = status;
            this.Title = title;
            this.TopContributors = topContributors;
            this.TotalPhotos = totalPhotos;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Gets or Sets ConverPhoto
        /// </summary>
        [DataMember(Name = "conver_photo", EmitDefaultValue = false)]
        public Photo ConverPhoto { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets EndsAt
        /// </summary>
        [DataMember(Name = "ends_at", EmitDefaultValue = false)]
        public string EndsAt { get; set; }

        /// <summary>
        /// Gets or Sets Featured
        /// </summary>
        [DataMember(Name = "featured", EmitDefaultValue = true)]
        public bool Featured { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public TopicLinks Links { get; set; }

        /// <summary>
        /// Gets or Sets OnlySubmissionsAfter
        /// </summary>
        [DataMember(Name = "only_submissions_after", EmitDefaultValue = false)]
        public string OnlySubmissionsAfter { get; set; }

        /// <summary>
        /// Gets or Sets Owners
        /// </summary>
        [DataMember(Name = "owners", EmitDefaultValue = false)]
        public List<User> Owners { get; set; }

        /// <summary>
        /// Gets or Sets PublishedAt
        /// </summary>
        [DataMember(Name = "published_at", EmitDefaultValue = false)]
        public DateTime PublishedAt { get; set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [DataMember(Name = "slug", EmitDefaultValue = false)]
        public string Slug { get; set; }

        /// <summary>
        /// Gets or Sets StartsAt
        /// </summary>
        [DataMember(Name = "starts_at", EmitDefaultValue = false)]
        public DateTime StartsAt { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets TopContributors
        /// </summary>
        [DataMember(Name = "top_contributors", EmitDefaultValue = false)]
        public List<User> TopContributors { get; set; }

        /// <summary>
        /// Gets or Sets TotalPhotos
        /// </summary>
        [DataMember(Name = "total_photos", EmitDefaultValue = false)]
        public int TotalPhotos { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Topic {\n");
            sb.Append("  ConverPhoto: ").Append(ConverPhoto).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EndsAt: ").Append(EndsAt).Append("\n");
            sb.Append("  Featured: ").Append(Featured).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  OnlySubmissionsAfter: ").Append(OnlySubmissionsAfter).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  PublishedAt: ").Append(PublishedAt).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  StartsAt: ").Append(StartsAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TopContributors: ").Append(TopContributors).Append("\n");
            sb.Append("  TotalPhotos: ").Append(TotalPhotos).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Topic);
        }

        /// <summary>
        /// Returns true if Topic instances are equal
        /// </summary>
        /// <param name="input">Instance of Topic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Topic input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConverPhoto == input.ConverPhoto ||
                    (this.ConverPhoto != null &&
                    this.ConverPhoto.Equals(input.ConverPhoto))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EndsAt == input.EndsAt ||
                    (this.EndsAt != null &&
                    this.EndsAt.Equals(input.EndsAt))
                ) && 
                (
                    this.Featured == input.Featured ||
                    this.Featured.Equals(input.Featured)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.OnlySubmissionsAfter == input.OnlySubmissionsAfter ||
                    (this.OnlySubmissionsAfter != null &&
                    this.OnlySubmissionsAfter.Equals(input.OnlySubmissionsAfter))
                ) && 
                (
                    this.Owners == input.Owners ||
                    this.Owners != null &&
                    input.Owners != null &&
                    this.Owners.SequenceEqual(input.Owners)
                ) && 
                (
                    this.PublishedAt == input.PublishedAt ||
                    (this.PublishedAt != null &&
                    this.PublishedAt.Equals(input.PublishedAt))
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.StartsAt == input.StartsAt ||
                    (this.StartsAt != null &&
                    this.StartsAt.Equals(input.StartsAt))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.TopContributors == input.TopContributors ||
                    this.TopContributors != null &&
                    input.TopContributors != null &&
                    this.TopContributors.SequenceEqual(input.TopContributors)
                ) && 
                (
                    this.TotalPhotos == input.TotalPhotos ||
                    this.TotalPhotos.Equals(input.TotalPhotos)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConverPhoto != null)
                {
                    hashCode = (hashCode * 59) + this.ConverPhoto.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.EndsAt != null)
                {
                    hashCode = (hashCode * 59) + this.EndsAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Featured.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                if (this.OnlySubmissionsAfter != null)
                {
                    hashCode = (hashCode * 59) + this.OnlySubmissionsAfter.GetHashCode();
                }
                if (this.Owners != null)
                {
                    hashCode = (hashCode * 59) + this.Owners.GetHashCode();
                }
                if (this.PublishedAt != null)
                {
                    hashCode = (hashCode * 59) + this.PublishedAt.GetHashCode();
                }
                if (this.Slug != null)
                {
                    hashCode = (hashCode * 59) + this.Slug.GetHashCode();
                }
                if (this.StartsAt != null)
                {
                    hashCode = (hashCode * 59) + this.StartsAt.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.TopContributors != null)
                {
                    hashCode = (hashCode * 59) + this.TopContributors.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalPhotos.GetHashCode();
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
