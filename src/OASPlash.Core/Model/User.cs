/*
 * Unsplash API
 *
 * This document describes the resources that make up the official Unsplash JSON API. 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = OASPlash.Core.Client.FileParameter;
using OpenAPIDateConverter = OASPlash.Core.Client.OpenAPIDateConverter;

namespace OASPlash.Core.Model
{
    /// <summary>
    /// User
    /// </summary>
    [DataContract(Name = "User")]
    public partial class User : IEquatable<User>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="badge">badge.</param>
        /// <param name="bio">bio.</param>
        /// <param name="downloads">downloads.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="followedByUser">followedByUser.</param>
        /// <param name="followersCount">followersCount.</param>
        /// <param name="followingCount">followingCount.</param>
        /// <param name="id">id.</param>
        /// <param name="instagramUsername">instagramUsername.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="links">links.</param>
        /// <param name="location">location.</param>
        /// <param name="name">name.</param>
        /// <param name="portfolioUrl">portfolioUrl.</param>
        /// <param name="profileImage">profileImage.</param>
        /// <param name="totalCollections">totalCollections.</param>
        /// <param name="totalLikes">totalLikes.</param>
        /// <param name="totalPhotos">totalPhotos.</param>
        /// <param name="twitterUsername">twitterUsername.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="username">username.</param>
        public User(Badge badge = default(Badge), string bio = default(string), int downloads = default(int), string firstName = default(string), bool followedByUser = default(bool), int followersCount = default(int), int followingCount = default(int), string id = default(string), string instagramUsername = default(string), string lastName = default(string), UserLinks links = default(UserLinks), string location = default(string), string name = default(string), string portfolioUrl = default(string), ProfileImage profileImage = default(ProfileImage), int totalCollections = default(int), int totalLikes = default(int), int totalPhotos = default(int), string twitterUsername = default(string), DateTime updatedAt = default(DateTime), string username = default(string))
        {
            this.Badge = badge;
            this.Bio = bio;
            this.Downloads = downloads;
            this.FirstName = firstName;
            this.FollowedByUser = followedByUser;
            this.FollowersCount = followersCount;
            this.FollowingCount = followingCount;
            this.Id = id;
            this.InstagramUsername = instagramUsername;
            this.LastName = lastName;
            this.Links = links;
            this.Location = location;
            this.Name = name;
            this.PortfolioUrl = portfolioUrl;
            this.ProfileImage = profileImage;
            this.TotalCollections = totalCollections;
            this.TotalLikes = totalLikes;
            this.TotalPhotos = totalPhotos;
            this.TwitterUsername = twitterUsername;
            this.UpdatedAt = updatedAt;
            this.Username = username;
        }

        /// <summary>
        /// Gets or Sets Badge
        /// </summary>
        [DataMember(Name = "badge", EmitDefaultValue = false)]
        public Badge Badge { get; set; }

        /// <summary>
        /// Gets or Sets Bio
        /// </summary>
        [DataMember(Name = "bio", EmitDefaultValue = false)]
        public string Bio { get; set; }

        /// <summary>
        /// Gets or Sets Downloads
        /// </summary>
        [DataMember(Name = "downloads", EmitDefaultValue = false)]
        public int Downloads { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "first_name", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets FollowedByUser
        /// </summary>
        [DataMember(Name = "followed_by_user", EmitDefaultValue = true)]
        public bool FollowedByUser { get; set; }

        /// <summary>
        /// Gets or Sets FollowersCount
        /// </summary>
        [DataMember(Name = "followers_count", EmitDefaultValue = false)]
        public int FollowersCount { get; set; }

        /// <summary>
        /// Gets or Sets FollowingCount
        /// </summary>
        [DataMember(Name = "following_count", EmitDefaultValue = false)]
        public int FollowingCount { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets InstagramUsername
        /// </summary>
        [DataMember(Name = "instagram_username", EmitDefaultValue = false)]
        public string InstagramUsername { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "last_name", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public UserLinks Links { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioUrl
        /// </summary>
        [DataMember(Name = "portfolio_url", EmitDefaultValue = false)]
        public string PortfolioUrl { get; set; }

        /// <summary>
        /// Gets or Sets ProfileImage
        /// </summary>
        [DataMember(Name = "profile_image", EmitDefaultValue = false)]
        public ProfileImage ProfileImage { get; set; }

        /// <summary>
        /// Gets or Sets TotalCollections
        /// </summary>
        [DataMember(Name = "total_collections", EmitDefaultValue = false)]
        public int TotalCollections { get; set; }

        /// <summary>
        /// Gets or Sets TotalLikes
        /// </summary>
        [DataMember(Name = "total_likes", EmitDefaultValue = false)]
        public int TotalLikes { get; set; }

        /// <summary>
        /// Gets or Sets TotalPhotos
        /// </summary>
        [DataMember(Name = "total_photos", EmitDefaultValue = false)]
        public int TotalPhotos { get; set; }

        /// <summary>
        /// Gets or Sets TwitterUsername
        /// </summary>
        [DataMember(Name = "twitter_username", EmitDefaultValue = false)]
        public string TwitterUsername { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Badge: ").Append(Badge).Append("\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("  Downloads: ").Append(Downloads).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  FollowedByUser: ").Append(FollowedByUser).Append("\n");
            sb.Append("  FollowersCount: ").Append(FollowersCount).Append("\n");
            sb.Append("  FollowingCount: ").Append(FollowingCount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstagramUsername: ").Append(InstagramUsername).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PortfolioUrl: ").Append(PortfolioUrl).Append("\n");
            sb.Append("  ProfileImage: ").Append(ProfileImage).Append("\n");
            sb.Append("  TotalCollections: ").Append(TotalCollections).Append("\n");
            sb.Append("  TotalLikes: ").Append(TotalLikes).Append("\n");
            sb.Append("  TotalPhotos: ").Append(TotalPhotos).Append("\n");
            sb.Append("  TwitterUsername: ").Append(TwitterUsername).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as User);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="input">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Badge == input.Badge ||
                    (this.Badge != null &&
                    this.Badge.Equals(input.Badge))
                ) && 
                (
                    this.Bio == input.Bio ||
                    (this.Bio != null &&
                    this.Bio.Equals(input.Bio))
                ) && 
                (
                    this.Downloads == input.Downloads ||
                    this.Downloads.Equals(input.Downloads)
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.FollowedByUser == input.FollowedByUser ||
                    this.FollowedByUser.Equals(input.FollowedByUser)
                ) && 
                (
                    this.FollowersCount == input.FollowersCount ||
                    this.FollowersCount.Equals(input.FollowersCount)
                ) && 
                (
                    this.FollowingCount == input.FollowingCount ||
                    this.FollowingCount.Equals(input.FollowingCount)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InstagramUsername == input.InstagramUsername ||
                    (this.InstagramUsername != null &&
                    this.InstagramUsername.Equals(input.InstagramUsername))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PortfolioUrl == input.PortfolioUrl ||
                    (this.PortfolioUrl != null &&
                    this.PortfolioUrl.Equals(input.PortfolioUrl))
                ) && 
                (
                    this.ProfileImage == input.ProfileImage ||
                    (this.ProfileImage != null &&
                    this.ProfileImage.Equals(input.ProfileImage))
                ) && 
                (
                    this.TotalCollections == input.TotalCollections ||
                    this.TotalCollections.Equals(input.TotalCollections)
                ) && 
                (
                    this.TotalLikes == input.TotalLikes ||
                    this.TotalLikes.Equals(input.TotalLikes)
                ) && 
                (
                    this.TotalPhotos == input.TotalPhotos ||
                    this.TotalPhotos.Equals(input.TotalPhotos)
                ) && 
                (
                    this.TwitterUsername == input.TwitterUsername ||
                    (this.TwitterUsername != null &&
                    this.TwitterUsername.Equals(input.TwitterUsername))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Badge != null)
                {
                    hashCode = (hashCode * 59) + this.Badge.GetHashCode();
                }
                if (this.Bio != null)
                {
                    hashCode = (hashCode * 59) + this.Bio.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Downloads.GetHashCode();
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FollowedByUser.GetHashCode();
                hashCode = (hashCode * 59) + this.FollowersCount.GetHashCode();
                hashCode = (hashCode * 59) + this.FollowingCount.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.InstagramUsername != null)
                {
                    hashCode = (hashCode * 59) + this.InstagramUsername.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.PortfolioUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioUrl.GetHashCode();
                }
                if (this.ProfileImage != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileImage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalCollections.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalLikes.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPhotos.GetHashCode();
                if (this.TwitterUsername != null)
                {
                    hashCode = (hashCode * 59) + this.TwitterUsername.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
