/*
 * Unsplash API
 *
 * This document describes the resources that make up the official Unsplash JSON API. 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = OASPlash.Core.Client.FileParameter;
using OpenAPIDateConverter = OASPlash.Core.Client.OpenAPIDateConverter;

namespace OASPlash.Core.Model
{
    /// <summary>
    /// PhotoUrls
    /// </summary>
    [DataContract(Name = "PhotoUrls")]
    public partial class PhotoUrls : IEquatable<PhotoUrls>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhotoUrls" /> class.
        /// </summary>
        /// <param name="raw">raw.</param>
        /// <param name="full">full.</param>
        /// <param name="regular">regular.</param>
        /// <param name="small">small.</param>
        /// <param name="thumb">thumb.</param>
        public PhotoUrls(string raw = default(string), string full = default(string), string regular = default(string), string small = default(string), string thumb = default(string))
        {
            this.Raw = raw;
            this.Full = full;
            this.Regular = regular;
            this.Small = small;
            this.Thumb = thumb;
        }

        /// <summary>
        /// Gets or Sets Raw
        /// </summary>
        [DataMember(Name = "raw", EmitDefaultValue = false)]
        public string Raw { get; set; }

        /// <summary>
        /// Gets or Sets Full
        /// </summary>
        [DataMember(Name = "full", EmitDefaultValue = false)]
        public string Full { get; set; }

        /// <summary>
        /// Gets or Sets Regular
        /// </summary>
        [DataMember(Name = "regular", EmitDefaultValue = false)]
        public string Regular { get; set; }

        /// <summary>
        /// Gets or Sets Small
        /// </summary>
        [DataMember(Name = "small", EmitDefaultValue = false)]
        public string Small { get; set; }

        /// <summary>
        /// Gets or Sets Thumb
        /// </summary>
        [DataMember(Name = "thumb", EmitDefaultValue = false)]
        public string Thumb { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PhotoUrls {\n");
            sb.Append("  Raw: ").Append(Raw).Append("\n");
            sb.Append("  Full: ").Append(Full).Append("\n");
            sb.Append("  Regular: ").Append(Regular).Append("\n");
            sb.Append("  Small: ").Append(Small).Append("\n");
            sb.Append("  Thumb: ").Append(Thumb).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhotoUrls);
        }

        /// <summary>
        /// Returns true if PhotoUrls instances are equal
        /// </summary>
        /// <param name="input">Instance of PhotoUrls to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhotoUrls input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Raw == input.Raw ||
                    (this.Raw != null &&
                    this.Raw.Equals(input.Raw))
                ) && 
                (
                    this.Full == input.Full ||
                    (this.Full != null &&
                    this.Full.Equals(input.Full))
                ) && 
                (
                    this.Regular == input.Regular ||
                    (this.Regular != null &&
                    this.Regular.Equals(input.Regular))
                ) && 
                (
                    this.Small == input.Small ||
                    (this.Small != null &&
                    this.Small.Equals(input.Small))
                ) && 
                (
                    this.Thumb == input.Thumb ||
                    (this.Thumb != null &&
                    this.Thumb.Equals(input.Thumb))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Raw != null)
                {
                    hashCode = (hashCode * 59) + this.Raw.GetHashCode();
                }
                if (this.Full != null)
                {
                    hashCode = (hashCode * 59) + this.Full.GetHashCode();
                }
                if (this.Regular != null)
                {
                    hashCode = (hashCode * 59) + this.Regular.GetHashCode();
                }
                if (this.Small != null)
                {
                    hashCode = (hashCode * 59) + this.Small.GetHashCode();
                }
                if (this.Thumb != null)
                {
                    hashCode = (hashCode * 59) + this.Thumb.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
