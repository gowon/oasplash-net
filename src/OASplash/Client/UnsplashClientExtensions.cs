// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace OASplash.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for UnsplashClient.
    /// </summary>
    public static partial class UnsplashClientExtensions
    {
            /// <summary>
            /// Get the user’s profile
            /// </summary>
            /// <remarks>
            /// Note: To access a user’s private data, the user is required to authorize
            /// the read_user scope. Without a Bearer token (i.e. using a Client-ID token)
            /// this request will return a 401 Unauthorized response.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CurrentUser GetCurrentUser(this IUnsplashClient operations)
            {
                return operations.GetCurrentUserAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the user’s profile
            /// </summary>
            /// <remarks>
            /// Note: To access a user’s private data, the user is required to authorize
            /// the read_user scope. Without a Bearer token (i.e. using a Client-ID token)
            /// this request will return a 401 Unauthorized response.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CurrentUser> GetCurrentUserAsync(this IUnsplashClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentUserWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the current user’s profile
            /// </summary>
            /// <remarks>
            /// Note: This action requires the write_user scope. Without it, it will return
            /// a 403 Forbidden response.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bio'>
            /// About/bio.
            /// </param>
            /// <param name='username'>
            /// Username.
            /// </param>
            /// <param name='firstName'>
            /// First name.
            /// </param>
            /// <param name='lastName'>
            /// Last name.
            /// </param>
            /// <param name='email'>
            /// Email.
            /// </param>
            /// <param name='url'>
            /// Portfolio/personal URL.
            /// </param>
            /// <param name='location'>
            /// Location.
            /// </param>
            /// <param name='instagramUsername'>
            /// Instagram username.
            /// </param>
            public static CurrentUser UpdateCurrentUser(this IUnsplashClient operations, string bio, string username = default(string), string firstName = default(string), string lastName = default(string), string email = default(string), string url = default(string), string location = default(string), string instagramUsername = default(string))
            {
                return operations.UpdateCurrentUserAsync(bio, username, firstName, lastName, email, url, location, instagramUsername).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the current user’s profile
            /// </summary>
            /// <remarks>
            /// Note: This action requires the write_user scope. Without it, it will return
            /// a 403 Forbidden response.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bio'>
            /// About/bio.
            /// </param>
            /// <param name='username'>
            /// Username.
            /// </param>
            /// <param name='firstName'>
            /// First name.
            /// </param>
            /// <param name='lastName'>
            /// Last name.
            /// </param>
            /// <param name='email'>
            /// Email.
            /// </param>
            /// <param name='url'>
            /// Portfolio/personal URL.
            /// </param>
            /// <param name='location'>
            /// Location.
            /// </param>
            /// <param name='instagramUsername'>
            /// Instagram username.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CurrentUser> UpdateCurrentUserAsync(this IUnsplashClient operations, string bio, string username = default(string), string firstName = default(string), string lastName = default(string), string email = default(string), string url = default(string), string location = default(string), string instagramUsername = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCurrentUserWithHttpMessagesAsync(bio, username, firstName, lastName, email, url, location, instagramUsername, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a user’s public profile
            /// </summary>
            /// <remarks>
            /// Retrieve public details on a given user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// The user’s username.
            /// </param>
            public static User GetUser(this IUnsplashClient operations, string username)
            {
                return operations.GetUserAsync(username).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a user’s public profile
            /// </summary>
            /// <remarks>
            /// Retrieve public details on a given user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// The user’s username.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> GetUserAsync(this IUnsplashClient operations, string username, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserWithHttpMessagesAsync(username, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a user’s portfolio link
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// The user’s username.
            /// </param>
            public static PortfolioLink GetUserPortfolioLink(this IUnsplashClient operations, string username)
            {
                return operations.GetUserPortfolioLinkAsync(username).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a user’s portfolio link
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// The user’s username.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioLink> GetUserPortfolioLinkAsync(this IUnsplashClient operations, string username, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserPortfolioLinkWithHttpMessagesAsync(username, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List a user’s photos
            /// </summary>
            /// <remarks>
            /// Get a list of photos uploaded by a user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// The user’s username.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            /// <param name='orderBy'>
            /// How to sort the photos. Optional. (Valid values: latest, oldest, popular;
            /// default: latest)
            /// . Possible values include: 'latest', 'oldest', 'popular'
            /// </param>
            /// <param name='stats'>
            /// Show the stats for each user’s photo. (Optional; default: false)
            /// </param>
            /// <param name='resolution'>
            /// The frequency of the stats. (Optional; default: “days”)
            /// . Possible values include: 'days'
            /// </param>
            /// <param name='quantity'>
            /// The amount of for each stat. (Optional; default: 30)
            /// </param>
            /// <param name='orientation'>
            /// Filter by photo orientation. Optional. (Valid values: landscape, portrait,
            /// squarish)
            /// . Possible values include: 'landscape', 'portrait', 'squarish'
            /// </param>
            public static IList<Photo> GetUserPhotos(this IUnsplashClient operations, string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), bool? stats = default(bool?), StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), Orientation? orientation = default(Orientation?))
            {
                return operations.GetUserPhotosAsync(username, page, perPage, orderBy, stats, resolution, quantity, orientation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List a user’s photos
            /// </summary>
            /// <remarks>
            /// Get a list of photos uploaded by a user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// The user’s username.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            /// <param name='orderBy'>
            /// How to sort the photos. Optional. (Valid values: latest, oldest, popular;
            /// default: latest)
            /// . Possible values include: 'latest', 'oldest', 'popular'
            /// </param>
            /// <param name='stats'>
            /// Show the stats for each user’s photo. (Optional; default: false)
            /// </param>
            /// <param name='resolution'>
            /// The frequency of the stats. (Optional; default: “days”)
            /// . Possible values include: 'days'
            /// </param>
            /// <param name='quantity'>
            /// The amount of for each stat. (Optional; default: 30)
            /// </param>
            /// <param name='orientation'>
            /// Filter by photo orientation. Optional. (Valid values: landscape, portrait,
            /// squarish)
            /// . Possible values include: 'landscape', 'portrait', 'squarish'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Photo>> GetUserPhotosAsync(this IUnsplashClient operations, string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), bool? stats = default(bool?), StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), Orientation? orientation = default(Orientation?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserPhotosWithHttpMessagesAsync(username, page, perPage, orderBy, stats, resolution, quantity, orientation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List a user's liked photos
            /// </summary>
            /// <remarks>
            /// Get a list of photos liked by a user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// The user’s username.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            /// <param name='orderBy'>
            /// How to sort the photos. Optional. (Valid values: latest, oldest, popular;
            /// default: latest)
            /// . Possible values include: 'latest', 'oldest', 'popular'
            /// </param>
            /// <param name='orientation'>
            /// Filter by photo orientation. Optional. (Valid values: landscape, portrait,
            /// squarish)
            /// . Possible values include: 'landscape', 'portrait', 'squarish'
            /// </param>
            public static IList<Photo> GetUserLikedPhotos(this IUnsplashClient operations, string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), Orientation? orientation = default(Orientation?))
            {
                return operations.GetUserLikedPhotosAsync(username, page, perPage, orderBy, orientation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List a user's liked photos
            /// </summary>
            /// <remarks>
            /// Get a list of photos liked by a user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// The user’s username.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            /// <param name='orderBy'>
            /// How to sort the photos. Optional. (Valid values: latest, oldest, popular;
            /// default: latest)
            /// . Possible values include: 'latest', 'oldest', 'popular'
            /// </param>
            /// <param name='orientation'>
            /// Filter by photo orientation. Optional. (Valid values: landscape, portrait,
            /// squarish)
            /// . Possible values include: 'landscape', 'portrait', 'squarish'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Photo>> GetUserLikedPhotosAsync(this IUnsplashClient operations, string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), Orientation? orientation = default(Orientation?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserLikedPhotosWithHttpMessagesAsync(username, page, perPage, orderBy, orientation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List a user’s collections
            /// </summary>
            /// <remarks>
            /// Get a list of collections created by the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// The user’s username.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            public static IList<Collection> GetUserCollections(this IUnsplashClient operations, string username, int? page = default(int?), int? perPage = default(int?))
            {
                return operations.GetUserCollectionsAsync(username, page, perPage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List a user’s collections
            /// </summary>
            /// <remarks>
            /// Get a list of collections created by the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// The user’s username.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Collection>> GetUserCollectionsAsync(this IUnsplashClient operations, string username, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserCollectionsWithHttpMessagesAsync(username, page, perPage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a user’s statistics
            /// </summary>
            /// <remarks>
            /// Retrieve the consolidated number of downloads, views and likes of all
            /// user’s photos, as well as the historical breakdown and average of these
            /// stats in a specific timeframe (default is 30 days).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// The user’s username.
            /// </param>
            /// <param name='resolution'>
            /// The frequency of the stats. (Optional; default: “days”)
            /// . Possible values include: 'days'
            /// </param>
            /// <param name='quantity'>
            /// The amount of for each stat. (Optional; default: 30)
            /// </param>
            public static UserStatistics GetUserStatistics(this IUnsplashClient operations, string username, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?))
            {
                return operations.GetUserStatisticsAsync(username, resolution, quantity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a user’s statistics
            /// </summary>
            /// <remarks>
            /// Retrieve the consolidated number of downloads, views and likes of all
            /// user’s photos, as well as the historical breakdown and average of these
            /// stats in a specific timeframe (default is 30 days).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// The user’s username.
            /// </param>
            /// <param name='resolution'>
            /// The frequency of the stats. (Optional; default: “days”)
            /// . Possible values include: 'days'
            /// </param>
            /// <param name='quantity'>
            /// The amount of for each stat. (Optional; default: 30)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserStatistics> GetUserStatisticsAsync(this IUnsplashClient operations, string username, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserStatisticsWithHttpMessagesAsync(username, resolution, quantity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List photos
            /// </summary>
            /// <remarks>
            /// Get a single page from the list of all photos.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            /// <param name='orderBy'>
            /// How to sort the photos. Optional. (Valid values: latest, oldest, popular;
            /// default: latest)
            /// . Possible values include: 'latest', 'oldest', 'popular'
            /// </param>
            public static IList<Photo> GetPhotos(this IUnsplashClient operations, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?))
            {
                return operations.GetPhotosAsync(page, perPage, orderBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List photos
            /// </summary>
            /// <remarks>
            /// Get a single page from the list of all photos.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            /// <param name='orderBy'>
            /// How to sort the photos. Optional. (Valid values: latest, oldest, popular;
            /// default: latest)
            /// . Possible values include: 'latest', 'oldest', 'popular'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Photo>> GetPhotosAsync(this IUnsplashClient operations, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPhotosWithHttpMessagesAsync(page, perPage, orderBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a photo
            /// </summary>
            /// <remarks>
            /// Retrieve a single photo.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The photo’s ID.
            /// </param>
            public static Photo GetPhotoById(this IUnsplashClient operations, string id)
            {
                return operations.GetPhotoByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a photo
            /// </summary>
            /// <remarks>
            /// Retrieve a single photo.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The photo’s ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Photo> GetPhotoByIdAsync(this IUnsplashClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPhotoByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a photo
            /// </summary>
            /// <remarks>
            /// Update a photo on behalf of the logged-in user. This requires the
            /// write_photos scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The photo’s ID.
            /// </param>
            /// <param name='description'>
            /// The photo’s description (Optional).
            /// </param>
            /// <param name='showOnProfile'>
            /// The photo’s visibility (Optional).
            /// </param>
            /// <param name='tags'>
            /// The photo’s tags (Optional).
            /// </param>
            /// <param name='locationlatitude'>
            /// The photo location’s latitude rounded to 6 decimals. (Optional)
            /// </param>
            /// <param name='locationlongitude'>
            /// The photo location’s longitude rounded to 6 decimals. (Optional)
            /// </param>
            /// <param name='locationname'>
            /// The photo’s full location string (including city and country) (Optional)
            /// </param>
            /// <param name='locationcity'>
            /// The photo location’s city (Optional)
            /// </param>
            /// <param name='locationcountry'>
            /// The photo location’s country (Optional)
            /// </param>
            /// <param name='exifmake'>
            /// Camera’s brand (Optional)
            /// </param>
            /// <param name='exifmodel'>
            /// Camera’s model (Optional)
            /// </param>
            /// <param name='exifexposureTime'>
            /// Camera’s exposure time (Optional)
            /// </param>
            /// <param name='exifapertureValue'>
            /// Camera’s aperture value (Optional)
            /// </param>
            /// <param name='exiffocalLength'>
            /// Camera’s focal length (Optional)
            /// </param>
            /// <param name='exifisoSpeedRatings'>
            /// Camera’s iso (Optional)
            /// </param>
            public static Photo UpdatePhoto(this IUnsplashClient operations, string id, string description = default(string), bool? showOnProfile = default(bool?), string tags = default(string), double? locationlatitude = default(double?), double? locationlongitude = default(double?), string locationname = default(string), string locationcity = default(string), string locationcountry = default(string), string exifmake = default(string), string exifmodel = default(string), string exifexposureTime = default(string), string exifapertureValue = default(string), string exiffocalLength = default(string), string exifisoSpeedRatings = default(string))
            {
                return operations.UpdatePhotoAsync(id, description, showOnProfile, tags, locationlatitude, locationlongitude, locationname, locationcity, locationcountry, exifmake, exifmodel, exifexposureTime, exifapertureValue, exiffocalLength, exifisoSpeedRatings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a photo
            /// </summary>
            /// <remarks>
            /// Update a photo on behalf of the logged-in user. This requires the
            /// write_photos scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The photo’s ID.
            /// </param>
            /// <param name='description'>
            /// The photo’s description (Optional).
            /// </param>
            /// <param name='showOnProfile'>
            /// The photo’s visibility (Optional).
            /// </param>
            /// <param name='tags'>
            /// The photo’s tags (Optional).
            /// </param>
            /// <param name='locationlatitude'>
            /// The photo location’s latitude rounded to 6 decimals. (Optional)
            /// </param>
            /// <param name='locationlongitude'>
            /// The photo location’s longitude rounded to 6 decimals. (Optional)
            /// </param>
            /// <param name='locationname'>
            /// The photo’s full location string (including city and country) (Optional)
            /// </param>
            /// <param name='locationcity'>
            /// The photo location’s city (Optional)
            /// </param>
            /// <param name='locationcountry'>
            /// The photo location’s country (Optional)
            /// </param>
            /// <param name='exifmake'>
            /// Camera’s brand (Optional)
            /// </param>
            /// <param name='exifmodel'>
            /// Camera’s model (Optional)
            /// </param>
            /// <param name='exifexposureTime'>
            /// Camera’s exposure time (Optional)
            /// </param>
            /// <param name='exifapertureValue'>
            /// Camera’s aperture value (Optional)
            /// </param>
            /// <param name='exiffocalLength'>
            /// Camera’s focal length (Optional)
            /// </param>
            /// <param name='exifisoSpeedRatings'>
            /// Camera’s iso (Optional)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Photo> UpdatePhotoAsync(this IUnsplashClient operations, string id, string description = default(string), bool? showOnProfile = default(bool?), string tags = default(string), double? locationlatitude = default(double?), double? locationlongitude = default(double?), string locationname = default(string), string locationcity = default(string), string locationcountry = default(string), string exifmake = default(string), string exifmodel = default(string), string exifexposureTime = default(string), string exifapertureValue = default(string), string exiffocalLength = default(string), string exifisoSpeedRatings = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePhotoWithHttpMessagesAsync(id, description, showOnProfile, tags, locationlatitude, locationlongitude, locationname, locationcity, locationcountry, exifmake, exifmodel, exifexposureTime, exifapertureValue, exiffocalLength, exifisoSpeedRatings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a random photo
            /// </summary>
            /// <remarks>
            /// Retrieve a single random photo, given optional filters.
            /// You can’t use the collections and query parameters in the same request
            /// When supplying a count parameter - and only then - the response will be an
            /// array of photos, even if the value of count is 1.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collections'>
            /// Public collection ID(‘s) to filter selection. If multiple, comma-separated
            /// </param>
            /// <param name='featured'>
            /// Limit selection to featured photos.
            /// </param>
            /// <param name='username'>
            /// Limit selection to a single user.
            /// </param>
            /// <param name='query'>
            /// Limit selection to photos matching a search term.
            /// </param>
            /// <param name='orientation'>
            /// Filter by photo orientation. (Valid values: landscape, portrait, squarish)
            /// . Possible values include: 'landscape', 'portrait', 'squarish'
            /// </param>
            /// <param name='contentFilter'>
            /// Limit results by content safety. Default: low. Valid values are low and
            /// high.
            /// . Possible values include: 'low', 'high'
            /// </param>
            /// <param name='count'>
            /// The number of photos to return. (Default: 1; max: 30)
            /// </param>
            public static object GetRandomPhoto(this IUnsplashClient operations, string collections = default(string), bool? featured = default(bool?), string username = default(string), string query = default(string), Orientation? orientation = default(Orientation?), ContentFilter? contentFilter = default(ContentFilter?), int? count = default(int?))
            {
                return operations.GetRandomPhotoAsync(collections, featured, username, query, orientation, contentFilter, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a random photo
            /// </summary>
            /// <remarks>
            /// Retrieve a single random photo, given optional filters.
            /// You can’t use the collections and query parameters in the same request
            /// When supplying a count parameter - and only then - the response will be an
            /// array of photos, even if the value of count is 1.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collections'>
            /// Public collection ID(‘s) to filter selection. If multiple, comma-separated
            /// </param>
            /// <param name='featured'>
            /// Limit selection to featured photos.
            /// </param>
            /// <param name='username'>
            /// Limit selection to a single user.
            /// </param>
            /// <param name='query'>
            /// Limit selection to photos matching a search term.
            /// </param>
            /// <param name='orientation'>
            /// Filter by photo orientation. (Valid values: landscape, portrait, squarish)
            /// . Possible values include: 'landscape', 'portrait', 'squarish'
            /// </param>
            /// <param name='contentFilter'>
            /// Limit results by content safety. Default: low. Valid values are low and
            /// high.
            /// . Possible values include: 'low', 'high'
            /// </param>
            /// <param name='count'>
            /// The number of photos to return. (Default: 1; max: 30)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetRandomPhotoAsync(this IUnsplashClient operations, string collections = default(string), bool? featured = default(bool?), string username = default(string), string query = default(string), Orientation? orientation = default(Orientation?), ContentFilter? contentFilter = default(ContentFilter?), int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRandomPhotoWithHttpMessagesAsync(collections, featured, username, query, orientation, contentFilter, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a photo’s statistics
            /// </summary>
            /// <remarks>
            /// Retrieve total number of downloads, views and likes of a single photo, as
            /// well as the historical breakdown of these stats in a specific timeframe
            /// (default is 30 days).
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The public id of the photo.
            /// </param>
            /// <param name='resolution'>
            /// The frequency of the stats. (Optional; default: “days”)
            /// . Possible values include: 'days'
            /// </param>
            /// <param name='quantity'>
            /// The amount of for each stat. (Optional; default: 30)
            /// </param>
            public static PhotoStatistics GetPhotoStatistics(this IUnsplashClient operations, string id, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?))
            {
                return operations.GetPhotoStatisticsAsync(id, resolution, quantity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a photo’s statistics
            /// </summary>
            /// <remarks>
            /// Retrieve total number of downloads, views and likes of a single photo, as
            /// well as the historical breakdown of these stats in a specific timeframe
            /// (default is 30 days).
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The public id of the photo.
            /// </param>
            /// <param name='resolution'>
            /// The frequency of the stats. (Optional; default: “days”)
            /// . Possible values include: 'days'
            /// </param>
            /// <param name='quantity'>
            /// The amount of for each stat. (Optional; default: 30)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PhotoStatistics> GetPhotoStatisticsAsync(this IUnsplashClient operations, string id, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPhotoStatisticsWithHttpMessagesAsync(id, resolution, quantity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Track a photo download
            /// </summary>
            /// <remarks>
            /// To abide by the API guidelines, you need to trigger a GET request to this
            /// endpoint every time your application performs a download of a photo. To
            /// understand what constitutes a download, please refer to the ‘Triggering a
            /// download’ guideline.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The photo’s ID.
            /// </param>
            public static Photo TrackPhotoDownload(this IUnsplashClient operations, string id)
            {
                return operations.TrackPhotoDownloadAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Track a photo download
            /// </summary>
            /// <remarks>
            /// To abide by the API guidelines, you need to trigger a GET request to this
            /// endpoint every time your application performs a download of a photo. To
            /// understand what constitutes a download, please refer to the ‘Triggering a
            /// download’ guideline.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The photo’s ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Photo> TrackPhotoDownloadAsync(this IUnsplashClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TrackPhotoDownloadWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Like a photo on behalf of the logged-in user.
            /// </summary>
            /// <remarks>
            /// This action is idempotent; sending the POST request to a single photo
            /// multiple times has no additional effect.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The photo’s ID.
            /// </param>
            public static Photo LikePhoto(this IUnsplashClient operations, string id)
            {
                return operations.LikePhotoAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Like a photo on behalf of the logged-in user.
            /// </summary>
            /// <remarks>
            /// This action is idempotent; sending the POST request to a single photo
            /// multiple times has no additional effect.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The photo’s ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Photo> LikePhotoAsync(this IUnsplashClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LikePhotoWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove a user’s like of a photo.
            /// </summary>
            /// <remarks>
            /// This action is idempotent; sending the DELETE request to a single photo
            /// multiple times has no additional effect.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The photo’s ID.
            /// </param>
            public static Photo UnlikePhoto(this IUnsplashClient operations, string id)
            {
                return operations.UnlikePhotoAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a user’s like of a photo.
            /// </summary>
            /// <remarks>
            /// This action is idempotent; sending the DELETE request to a single photo
            /// multiple times has no additional effect.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The photo’s ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Photo> UnlikePhotoAsync(this IUnsplashClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnlikePhotoWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search photos
            /// </summary>
            /// <remarks>
            /// Get a single page of photo results for a query.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// Search terms.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional; default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            /// <param name='orderBy'>
            /// How to sort the photos. (Optional; default: relevant). Valid values are
            /// latest and relevant.
            /// . Possible values include: 'latest', 'oldest', 'popular'
            /// </param>
            /// <param name='collections'>
            /// Collection ID(‘s) to narrow search. Optional. If multiple, comma-separated.
            /// </param>
            /// <param name='contentFilter'>
            /// Limit results by content safety. (Optional; default: low). Valid values are
            /// low and high.
            /// . Possible values include: 'low', 'high'
            /// </param>
            /// <param name='color'>
            /// Filter results by color. Optional. Valid values are: black_and_white,
            /// black, white, yellow, orange, red, purple, magenta, green, teal, and blue.
            /// . Possible values include: 'black_and_white', 'black', 'white', 'yellow',
            /// 'orange', 'red', 'purple', 'magenta', 'green', 'teal', 'blue'
            /// </param>
            /// <param name='orientation'>
            /// Filter by photo orientation. Optional. (Valid values: landscape, portrait,
            /// squarish)
            /// . Possible values include: 'landscape', 'portrait', 'squarish'
            /// </param>
            public static PhotoSearchResults SearchPhotos(this IUnsplashClient operations, string query, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), string collections = default(string), ContentFilter? contentFilter = default(ContentFilter?), Color? color = default(Color?), Orientation? orientation = default(Orientation?))
            {
                return operations.SearchPhotosAsync(query, page, perPage, orderBy, collections, contentFilter, color, orientation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search photos
            /// </summary>
            /// <remarks>
            /// Get a single page of photo results for a query.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// Search terms.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional; default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            /// <param name='orderBy'>
            /// How to sort the photos. (Optional; default: relevant). Valid values are
            /// latest and relevant.
            /// . Possible values include: 'latest', 'oldest', 'popular'
            /// </param>
            /// <param name='collections'>
            /// Collection ID(‘s) to narrow search. Optional. If multiple, comma-separated.
            /// </param>
            /// <param name='contentFilter'>
            /// Limit results by content safety. (Optional; default: low). Valid values are
            /// low and high.
            /// . Possible values include: 'low', 'high'
            /// </param>
            /// <param name='color'>
            /// Filter results by color. Optional. Valid values are: black_and_white,
            /// black, white, yellow, orange, red, purple, magenta, green, teal, and blue.
            /// . Possible values include: 'black_and_white', 'black', 'white', 'yellow',
            /// 'orange', 'red', 'purple', 'magenta', 'green', 'teal', 'blue'
            /// </param>
            /// <param name='orientation'>
            /// Filter by photo orientation. Optional. (Valid values: landscape, portrait,
            /// squarish)
            /// . Possible values include: 'landscape', 'portrait', 'squarish'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PhotoSearchResults> SearchPhotosAsync(this IUnsplashClient operations, string query, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), string collections = default(string), ContentFilter? contentFilter = default(ContentFilter?), Color? color = default(Color?), Orientation? orientation = default(Orientation?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchPhotosWithHttpMessagesAsync(query, page, perPage, orderBy, collections, contentFilter, color, orientation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search collections
            /// </summary>
            /// <remarks>
            /// Get a single page of collection results for a query.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// Search terms.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            public static CollectionSearchResults SearchCollections(this IUnsplashClient operations, string query, int? page = default(int?), int? perPage = default(int?))
            {
                return operations.SearchCollectionsAsync(query, page, perPage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search collections
            /// </summary>
            /// <remarks>
            /// Get a single page of collection results for a query.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// Search terms.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CollectionSearchResults> SearchCollectionsAsync(this IUnsplashClient operations, string query, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchCollectionsWithHttpMessagesAsync(query, page, perPage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search users
            /// </summary>
            /// <remarks>
            /// Get a single page of user results for a query.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// Search terms.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            public static UserSearchResults SearchUsers(this IUnsplashClient operations, string query, int? page = default(int?), int? perPage = default(int?))
            {
                return operations.SearchUsersAsync(query, page, perPage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search users
            /// </summary>
            /// <remarks>
            /// Get a single page of user results for a query.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// Search terms.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserSearchResults> SearchUsersAsync(this IUnsplashClient operations, string query, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchUsersWithHttpMessagesAsync(query, page, perPage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List collections
            /// </summary>
            /// <remarks>
            /// Get a single page from the list of all collections.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            public static IList<Collection> GetCollections(this IUnsplashClient operations, int? page = default(int?), int? perPage = default(int?))
            {
                return operations.GetCollectionsAsync(page, perPage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List collections
            /// </summary>
            /// <remarks>
            /// Get a single page from the list of all collections.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Collection>> GetCollectionsAsync(this IUnsplashClient operations, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCollectionsWithHttpMessagesAsync(page, perPage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new collection
            /// </summary>
            /// <remarks>
            /// Create a new collection. This requires the write_collections scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='title'>
            /// The title of the collection.
            /// </param>
            /// <param name='description'>
            /// The collection’s description. (Optional.)
            /// </param>
            /// <param name='privateParameter'>
            /// Whether to make this collection private. (Optional; default false).
            /// </param>
            public static Collection CreateNewCollection(this IUnsplashClient operations, string title, string description = default(string), bool? privateParameter = default(bool?))
            {
                return operations.CreateNewCollectionAsync(title, description, privateParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new collection
            /// </summary>
            /// <remarks>
            /// Create a new collection. This requires the write_collections scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='title'>
            /// The title of the collection.
            /// </param>
            /// <param name='description'>
            /// The collection’s description. (Optional.)
            /// </param>
            /// <param name='privateParameter'>
            /// Whether to make this collection private. (Optional; default false).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Collection> CreateNewCollectionAsync(this IUnsplashClient operations, string title, string description = default(string), bool? privateParameter = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNewCollectionWithHttpMessagesAsync(title, description, privateParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a collection
            /// </summary>
            /// <remarks>
            /// Retrieve a single collection. To view a user’s private collections, the
            /// read_collections scope is required.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The collections’s ID.
            /// </param>
            public static Collection GetCollectionById(this IUnsplashClient operations, string id)
            {
                return operations.GetCollectionByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a collection
            /// </summary>
            /// <remarks>
            /// Retrieve a single collection. To view a user’s private collections, the
            /// read_collections scope is required.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The collections’s ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Collection> GetCollectionByIdAsync(this IUnsplashClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCollectionByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing collection
            /// </summary>
            /// <remarks>
            /// Update an existing collection belonging to the logged-in user. This
            /// requires the write_collections scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The collection’s ID.
            /// </param>
            /// <param name='title'>
            /// The title of the collection. (Optional.)
            /// </param>
            /// <param name='description'>
            /// The collection’s description. (Optional.)
            /// </param>
            /// <param name='privateParameter'>
            /// Whether to make this collection private. (Optional.)
            /// </param>
            public static Collection UpdateCollection(this IUnsplashClient operations, string id, string title = default(string), string description = default(string), bool? privateParameter = default(bool?))
            {
                return operations.UpdateCollectionAsync(id, title, description, privateParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing collection
            /// </summary>
            /// <remarks>
            /// Update an existing collection belonging to the logged-in user. This
            /// requires the write_collections scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The collection’s ID.
            /// </param>
            /// <param name='title'>
            /// The title of the collection. (Optional.)
            /// </param>
            /// <param name='description'>
            /// The collection’s description. (Optional.)
            /// </param>
            /// <param name='privateParameter'>
            /// Whether to make this collection private. (Optional.)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Collection> UpdateCollectionAsync(this IUnsplashClient operations, string id, string title = default(string), string description = default(string), bool? privateParameter = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCollectionWithHttpMessagesAsync(id, title, description, privateParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a collection
            /// </summary>
            /// <remarks>
            /// Delete a collection belonging to the logged-in user. This requires the
            /// write_collections scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The collection’s ID.
            /// </param>
            public static void DeleteCollectionById(this IUnsplashClient operations, string id)
            {
                operations.DeleteCollectionByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a collection
            /// </summary>
            /// <remarks>
            /// Delete a collection belonging to the logged-in user. This requires the
            /// write_collections scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The collection’s ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCollectionByIdAsync(this IUnsplashClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCollectionByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a collection’s photos
            /// </summary>
            /// <remarks>
            /// Retrieve a collection’s photos.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The collection’s ID.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            /// <param name='orientation'>
            /// Filter by photo orientation. Optional. (Valid values: landscape, portrait,
            /// squarish)
            /// . Possible values include: 'landscape', 'portrait', 'squarish'
            /// </param>
            public static IList<Photo> GetCollectionPhotos(this IUnsplashClient operations, string id, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?))
            {
                return operations.GetCollectionPhotosAsync(id, page, perPage, orientation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a collection’s photos
            /// </summary>
            /// <remarks>
            /// Retrieve a collection’s photos.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The collection’s ID.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            /// <param name='orientation'>
            /// Filter by photo orientation. Optional. (Valid values: landscape, portrait,
            /// squarish)
            /// . Possible values include: 'landscape', 'portrait', 'squarish'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Photo>> GetCollectionPhotosAsync(this IUnsplashClient operations, string id, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCollectionPhotosWithHttpMessagesAsync(id, page, perPage, orientation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List a collection’s related collections
            /// </summary>
            /// <remarks>
            /// Retrieve a list of collections related to this one.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The collection’s ID.
            /// </param>
            public static IList<Collection> GetRelatedCollections(this IUnsplashClient operations, string id)
            {
                return operations.GetRelatedCollectionsAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List a collection’s related collections
            /// </summary>
            /// <remarks>
            /// Retrieve a list of collections related to this one.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The collection’s ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Collection>> GetRelatedCollectionsAsync(this IUnsplashClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRelatedCollectionsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a photo to a collection
            /// </summary>
            /// <remarks>
            /// Add a photo to one of the logged-in user’s collections. Requires the
            /// write_collections scope. If the photo is already in the collection, this
            /// action has no effect.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionId'>
            /// The collection’s ID.
            /// </param>
            /// <param name='photoId'>
            /// The photo's ID.
            /// </param>
            public static OperationResponse AddPhotoToCollection(this IUnsplashClient operations, string collectionId, string photoId)
            {
                return operations.AddPhotoToCollectionAsync(collectionId, photoId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a photo to a collection
            /// </summary>
            /// <remarks>
            /// Add a photo to one of the logged-in user’s collections. Requires the
            /// write_collections scope. If the photo is already in the collection, this
            /// action has no effect.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionId'>
            /// The collection’s ID.
            /// </param>
            /// <param name='photoId'>
            /// The photo's ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> AddPhotoToCollectionAsync(this IUnsplashClient operations, string collectionId, string photoId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPhotoToCollectionWithHttpMessagesAsync(collectionId, photoId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove a photo from a collection
            /// </summary>
            /// <remarks>
            /// Remove a photo from one of the logged-in user’s collections. Requires the
            /// write_collections scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionId'>
            /// The collection’s ID.
            /// </param>
            /// <param name='photoId'>
            /// The photo's ID.
            /// </param>
            public static OperationResponse RemovePhotoFromCollection(this IUnsplashClient operations, string collectionId, string photoId)
            {
                return operations.RemovePhotoFromCollectionAsync(collectionId, photoId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a photo from a collection
            /// </summary>
            /// <remarks>
            /// Remove a photo from one of the logged-in user’s collections. Requires the
            /// write_collections scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionId'>
            /// The collection’s ID.
            /// </param>
            /// <param name='photoId'>
            /// The photo's ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> RemovePhotoFromCollectionAsync(this IUnsplashClient operations, string collectionId, string photoId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemovePhotoFromCollectionWithHttpMessagesAsync(collectionId, photoId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a topic’s photos
            /// </summary>
            /// <remarks>
            /// Retrieve a topic’s photos.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrSlug'>
            /// The topics’s ID or slug.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            /// <param name='orientation'>
            /// Filter by photo orientation. (Optional; Valid values: landscape, portrait,
            /// squarish)
            /// . Possible values include: 'landscape', 'portrait', 'squarish'
            /// </param>
            /// <param name='orderBy'>
            /// How to sort the photos. Optional. (Valid values: latest, oldest, popular;
            /// default: latest)
            /// . Possible values include: 'latest', 'oldest', 'popular'
            /// </param>
            public static IList<Photo> GetTopicPhotos(this IUnsplashClient operations, string idOrSlug, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?), OrderBy? orderBy = default(OrderBy?))
            {
                return operations.GetTopicPhotosAsync(idOrSlug, page, perPage, orientation, orderBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a topic’s photos
            /// </summary>
            /// <remarks>
            /// Retrieve a topic’s photos.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrSlug'>
            /// The topics’s ID or slug.
            /// </param>
            /// <param name='page'>
            /// Page number to retrieve. (Optional, default: 1)
            /// </param>
            /// <param name='perPage'>
            /// Number of items per page. (Optional; default: 10)
            /// </param>
            /// <param name='orientation'>
            /// Filter by photo orientation. (Optional; Valid values: landscape, portrait,
            /// squarish)
            /// . Possible values include: 'landscape', 'portrait', 'squarish'
            /// </param>
            /// <param name='orderBy'>
            /// How to sort the photos. Optional. (Valid values: latest, oldest, popular;
            /// default: latest)
            /// . Possible values include: 'latest', 'oldest', 'popular'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Photo>> GetTopicPhotosAsync(this IUnsplashClient operations, string idOrSlug, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?), OrderBy? orderBy = default(OrderBy?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTopicPhotosWithHttpMessagesAsync(idOrSlug, page, perPage, orientation, orderBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
