// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace OASplash.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Photo
    {
        /// <summary>
        /// Initializes a new instance of the Photo class.
        /// </summary>
        public Photo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Photo class.
        /// </summary>
        public Photo(string blurHash = default(string), string color = default(string), System.DateTime? createdAt = default(System.DateTime?), IList<Collection> currentUserCollections = default(IList<Collection>), string description = default(string), int? downloads = default(int?), Exif exif = default(Exif), int? height = default(int?), string id = default(string), bool? likedByUser = default(bool?), int? likes = default(int?), PhotoLinks links = default(PhotoLinks), Location location = default(Location), IList<PhotoTagsItem> tags = default(IList<PhotoTagsItem>), System.DateTime? updatedAt = default(System.DateTime?), PhotoUrls urls = default(PhotoUrls), User user = default(User), int? width = default(int?))
        {
            BlurHash = blurHash;
            Color = color;
            CreatedAt = createdAt;
            CurrentUserCollections = currentUserCollections;
            Description = description;
            Downloads = downloads;
            Exif = exif;
            Height = height;
            Id = id;
            LikedByUser = likedByUser;
            Likes = likes;
            Links = links;
            Location = location;
            Tags = tags;
            UpdatedAt = updatedAt;
            Urls = urls;
            User = user;
            Width = width;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "blur_hash")]
        public string BlurHash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "color")]
        public string Color { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "created_at")]
        public System.DateTime? CreatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "current_user_collections")]
        public IList<Collection> CurrentUserCollections { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "downloads")]
        public int? Downloads { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "exif")]
        public Exif Exif { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "height")]
        public int? Height { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "liked_by_user")]
        public bool? LikedByUser { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "likes")]
        public int? Likes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "links")]
        public PhotoLinks Links { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public Location Location { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<PhotoTagsItem> Tags { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "updated_at")]
        public System.DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "urls")]
        public PhotoUrls Urls { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "user")]
        public User User { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "width")]
        public int? Width { get; set; }

    }
}
