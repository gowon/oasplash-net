// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace OASplash.Client
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// This document describes the resources that make up the official
    /// Unsplash JSON API.
    ///
    /// </summary>
    public partial interface IUnsplashClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Get the user’s profile
        /// </summary>
        /// <remarks>
        /// Note: To access a user’s private data, the user is required to
        /// authorize the read_user scope. Without a Bearer token (i.e. using a
        /// Client-ID token) this request will return a 401 Unauthorized
        /// response.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CurrentUser>> GetCurrentUserWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update the current user’s profile
        /// </summary>
        /// <remarks>
        /// Note: This action requires the write_user scope. Without it, it
        /// will return a 403 Forbidden response.
        ///
        /// </remarks>
        /// <param name='bio'>
        /// About/bio.
        /// </param>
        /// <param name='username'>
        /// Username.
        /// </param>
        /// <param name='firstName'>
        /// First name.
        /// </param>
        /// <param name='lastName'>
        /// Last name.
        /// </param>
        /// <param name='email'>
        /// Email.
        /// </param>
        /// <param name='url'>
        /// Portfolio/personal URL.
        /// </param>
        /// <param name='location'>
        /// Location.
        /// </param>
        /// <param name='instagramUsername'>
        /// Instagram username.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CurrentUser>> UpdateCurrentUserWithHttpMessagesAsync(string bio, string username = default(string), string firstName = default(string), string lastName = default(string), string email = default(string), string url = default(string), string location = default(string), string instagramUsername = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a user’s public profile
        /// </summary>
        /// <remarks>
        /// Retrieve public details on a given user.
        /// </remarks>
        /// <param name='username'>
        /// The user’s username.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<User>> GetUserWithHttpMessagesAsync(string username, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a user’s portfolio link
        /// </summary>
        /// <param name='username'>
        /// The user’s username.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PortfolioLink>> GetUserPortfolioLinkWithHttpMessagesAsync(string username, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List a user’s photos
        /// </summary>
        /// <remarks>
        /// Get a list of photos uploaded by a user.
        /// </remarks>
        /// <param name='username'>
        /// The user’s username.
        /// </param>
        /// <param name='page'>
        /// Page number to retrieve. (Optional, default: 1)
        /// </param>
        /// <param name='perPage'>
        /// Number of items per page. (Optional; default: 10)
        /// </param>
        /// <param name='orderBy'>
        /// How to sort the photos. Optional. (Valid values: latest, oldest,
        /// popular; default: latest)
        /// . Possible values include: 'latest', 'oldest', 'popular'
        /// </param>
        /// <param name='stats'>
        /// Show the stats for each user’s photo. (Optional; default: false)
        /// </param>
        /// <param name='resolution'>
        /// The frequency of the stats. (Optional; default: “days”)
        /// . Possible values include: 'days'
        /// </param>
        /// <param name='quantity'>
        /// The amount of for each stat. (Optional; default: 30)
        /// </param>
        /// <param name='orientation'>
        /// Filter by photo orientation. Optional. (Valid values: landscape,
        /// portrait, squarish)
        /// . Possible values include: 'landscape', 'portrait', 'squarish'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Photo>>> GetUserPhotosWithHttpMessagesAsync(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), bool? stats = default(bool?), StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), Orientation? orientation = default(Orientation?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List a user's liked photos
        /// </summary>
        /// <remarks>
        /// Get a list of photos liked by a user.
        /// </remarks>
        /// <param name='username'>
        /// The user’s username.
        /// </param>
        /// <param name='page'>
        /// Page number to retrieve. (Optional, default: 1)
        /// </param>
        /// <param name='perPage'>
        /// Number of items per page. (Optional; default: 10)
        /// </param>
        /// <param name='orderBy'>
        /// How to sort the photos. Optional. (Valid values: latest, oldest,
        /// popular; default: latest)
        /// . Possible values include: 'latest', 'oldest', 'popular'
        /// </param>
        /// <param name='orientation'>
        /// Filter by photo orientation. Optional. (Valid values: landscape,
        /// portrait, squarish)
        /// . Possible values include: 'landscape', 'portrait', 'squarish'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Photo>>> GetUserLikedPhotosWithHttpMessagesAsync(string username, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), Orientation? orientation = default(Orientation?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List a user’s collections
        /// </summary>
        /// <remarks>
        /// Get a list of collections created by the user.
        /// </remarks>
        /// <param name='username'>
        /// The user’s username.
        /// </param>
        /// <param name='page'>
        /// Page number to retrieve. (Optional, default: 1)
        /// </param>
        /// <param name='perPage'>
        /// Number of items per page. (Optional; default: 10)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Collection>>> GetUserCollectionsWithHttpMessagesAsync(string username, int? page = default(int?), int? perPage = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a user’s statistics
        /// </summary>
        /// <remarks>
        /// Retrieve the consolidated number of downloads, views and likes of
        /// all user’s photos, as well as the historical breakdown and average
        /// of these stats in a specific timeframe (default is 30 days).
        /// </remarks>
        /// <param name='username'>
        /// The user’s username.
        /// </param>
        /// <param name='resolution'>
        /// The frequency of the stats. (Optional; default: “days”)
        /// . Possible values include: 'days'
        /// </param>
        /// <param name='quantity'>
        /// The amount of for each stat. (Optional; default: 30)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserStatistics>> GetUserStatisticsWithHttpMessagesAsync(string username, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List photos
        /// </summary>
        /// <remarks>
        /// Get a single page from the list of all photos.
        /// </remarks>
        /// <param name='page'>
        /// Page number to retrieve. (Optional, default: 1)
        /// </param>
        /// <param name='perPage'>
        /// Number of items per page. (Optional; default: 10)
        /// </param>
        /// <param name='orderBy'>
        /// How to sort the photos. Optional. (Valid values: latest, oldest,
        /// popular; default: latest)
        /// . Possible values include: 'latest', 'oldest', 'popular'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Photo>>> GetPhotosWithHttpMessagesAsync(int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a photo
        /// </summary>
        /// <remarks>
        /// Retrieve a single photo.
        /// </remarks>
        /// <param name='id'>
        /// The photo’s ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Photo>> GetPhotoByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a photo
        /// </summary>
        /// <remarks>
        /// Update a photo on behalf of the logged-in user. This requires the
        /// write_photos scope.
        /// </remarks>
        /// <param name='id'>
        /// The photo’s ID.
        /// </param>
        /// <param name='description'>
        /// The photo’s description (Optional).
        /// </param>
        /// <param name='showOnProfile'>
        /// The photo’s visibility (Optional).
        /// </param>
        /// <param name='tags'>
        /// The photo’s tags (Optional).
        /// </param>
        /// <param name='locationlatitude'>
        /// The photo location’s latitude rounded to 6 decimals. (Optional)
        /// </param>
        /// <param name='locationlongitude'>
        /// The photo location’s longitude rounded to 6 decimals. (Optional)
        /// </param>
        /// <param name='locationname'>
        /// The photo’s full location string (including city and country)
        /// (Optional)
        /// </param>
        /// <param name='locationcity'>
        /// The photo location’s city (Optional)
        /// </param>
        /// <param name='locationcountry'>
        /// The photo location’s country (Optional)
        /// </param>
        /// <param name='exifmake'>
        /// Camera’s brand (Optional)
        /// </param>
        /// <param name='exifmodel'>
        /// Camera’s model (Optional)
        /// </param>
        /// <param name='exifexposureTime'>
        /// Camera’s exposure time (Optional)
        /// </param>
        /// <param name='exifapertureValue'>
        /// Camera’s aperture value (Optional)
        /// </param>
        /// <param name='exiffocalLength'>
        /// Camera’s focal length (Optional)
        /// </param>
        /// <param name='exifisoSpeedRatings'>
        /// Camera’s iso (Optional)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Photo>> UpdatePhotoWithHttpMessagesAsync(string id, string description = default(string), bool? showOnProfile = default(bool?), string tags = default(string), double? locationlatitude = default(double?), double? locationlongitude = default(double?), string locationname = default(string), string locationcity = default(string), string locationcountry = default(string), string exifmake = default(string), string exifmodel = default(string), string exifexposureTime = default(string), string exifapertureValue = default(string), string exiffocalLength = default(string), string exifisoSpeedRatings = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a random photo
        /// </summary>
        /// <remarks>
        /// Retrieve a single random photo, given optional filters.
        /// You can’t use the collections and query parameters in the same
        /// request
        /// When supplying a count parameter - and only then - the response
        /// will be an array of photos, even if the value of count is 1.
        ///
        /// </remarks>
        /// <param name='collections'>
        /// Public collection ID(‘s) to filter selection. If multiple,
        /// comma-separated
        /// </param>
        /// <param name='featured'>
        /// Limit selection to featured photos.
        /// </param>
        /// <param name='username'>
        /// Limit selection to a single user.
        /// </param>
        /// <param name='query'>
        /// Limit selection to photos matching a search term.
        /// </param>
        /// <param name='orientation'>
        /// Filter by photo orientation. (Valid values: landscape, portrait,
        /// squarish)
        /// . Possible values include: 'landscape', 'portrait', 'squarish'
        /// </param>
        /// <param name='contentFilter'>
        /// Limit results by content safety. Default: low. Valid values are low
        /// and high.
        /// . Possible values include: 'low', 'high'
        /// </param>
        /// <param name='count'>
        /// The number of photos to return. (Default: 1; max: 30)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetRandomPhotoWithHttpMessagesAsync(string collections = default(string), bool? featured = default(bool?), string username = default(string), string query = default(string), Orientation? orientation = default(Orientation?), ContentFilter? contentFilter = default(ContentFilter?), int? count = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a photo’s statistics
        /// </summary>
        /// <remarks>
        /// Retrieve total number of downloads, views and likes of a single
        /// photo, as well as the historical breakdown of these stats in a
        /// specific timeframe (default is 30 days).
        ///
        /// </remarks>
        /// <param name='id'>
        /// The public id of the photo.
        /// </param>
        /// <param name='resolution'>
        /// The frequency of the stats. (Optional; default: “days”)
        /// . Possible values include: 'days'
        /// </param>
        /// <param name='quantity'>
        /// The amount of for each stat. (Optional; default: 30)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PhotoStatistics>> GetPhotoStatisticsWithHttpMessagesAsync(string id, StatResolution? resolution = default(StatResolution?), int? quantity = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Track a photo download
        /// </summary>
        /// <remarks>
        /// To abide by the API guidelines, you need to trigger a GET request
        /// to this endpoint every time your application performs a download of
        /// a photo. To understand what constitutes a download, please refer to
        /// the ‘Triggering a download’ guideline.
        ///
        /// </remarks>
        /// <param name='id'>
        /// The photo’s ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Photo>> TrackPhotoDownloadWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Like a photo on behalf of the logged-in user.
        /// </summary>
        /// <remarks>
        /// This action is idempotent; sending the POST request to a single
        /// photo multiple times has no additional effect.
        ///
        /// </remarks>
        /// <param name='id'>
        /// The photo’s ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Photo>> LikePhotoWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a user’s like of a photo.
        /// </summary>
        /// <remarks>
        /// This action is idempotent; sending the DELETE request to a single
        /// photo multiple times has no additional effect.
        ///
        /// </remarks>
        /// <param name='id'>
        /// The photo’s ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Photo>> UnlikePhotoWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search photos
        /// </summary>
        /// <remarks>
        /// Get a single page of photo results for a query.
        ///
        /// </remarks>
        /// <param name='query'>
        /// Search terms.
        /// </param>
        /// <param name='page'>
        /// Page number to retrieve. (Optional; default: 1)
        /// </param>
        /// <param name='perPage'>
        /// Number of items per page. (Optional; default: 10)
        /// </param>
        /// <param name='orderBy'>
        /// How to sort the photos. (Optional; default: relevant). Valid values
        /// are latest and relevant.
        /// . Possible values include: 'latest', 'oldest', 'popular'
        /// </param>
        /// <param name='collections'>
        /// Collection ID(‘s) to narrow search. Optional. If multiple,
        /// comma-separated.
        /// </param>
        /// <param name='contentFilter'>
        /// Limit results by content safety. (Optional; default: low). Valid
        /// values are low and high.
        /// . Possible values include: 'low', 'high'
        /// </param>
        /// <param name='color'>
        /// Filter results by color. Optional. Valid values are:
        /// black_and_white, black, white, yellow, orange, red, purple,
        /// magenta, green, teal, and blue.
        /// . Possible values include: 'black_and_white', 'black', 'white',
        /// 'yellow', 'orange', 'red', 'purple', 'magenta', 'green', 'teal',
        /// 'blue'
        /// </param>
        /// <param name='orientation'>
        /// Filter by photo orientation. Optional. (Valid values: landscape,
        /// portrait, squarish)
        /// . Possible values include: 'landscape', 'portrait', 'squarish'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PhotoSearchResults>> SearchPhotosWithHttpMessagesAsync(string query, int? page = default(int?), int? perPage = default(int?), OrderBy? orderBy = default(OrderBy?), string collections = default(string), ContentFilter? contentFilter = default(ContentFilter?), Color? color = default(Color?), Orientation? orientation = default(Orientation?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search collections
        /// </summary>
        /// <remarks>
        /// Get a single page of collection results for a query.
        /// </remarks>
        /// <param name='query'>
        /// Search terms.
        /// </param>
        /// <param name='page'>
        /// Page number to retrieve. (Optional, default: 1)
        /// </param>
        /// <param name='perPage'>
        /// Number of items per page. (Optional; default: 10)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CollectionSearchResults>> SearchCollectionsWithHttpMessagesAsync(string query, int? page = default(int?), int? perPage = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search users
        /// </summary>
        /// <remarks>
        /// Get a single page of user results for a query.
        /// </remarks>
        /// <param name='query'>
        /// Search terms.
        /// </param>
        /// <param name='page'>
        /// Page number to retrieve. (Optional, default: 1)
        /// </param>
        /// <param name='perPage'>
        /// Number of items per page. (Optional; default: 10)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserSearchResults>> SearchUsersWithHttpMessagesAsync(string query, int? page = default(int?), int? perPage = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List collections
        /// </summary>
        /// <remarks>
        /// Get a single page from the list of all collections.
        /// </remarks>
        /// <param name='page'>
        /// Page number to retrieve. (Optional, default: 1)
        /// </param>
        /// <param name='perPage'>
        /// Number of items per page. (Optional; default: 10)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Collection>>> GetCollectionsWithHttpMessagesAsync(int? page = default(int?), int? perPage = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new collection
        /// </summary>
        /// <remarks>
        /// Create a new collection. This requires the write_collections scope.
        /// </remarks>
        /// <param name='title'>
        /// The title of the collection.
        /// </param>
        /// <param name='description'>
        /// The collection’s description. (Optional.)
        /// </param>
        /// <param name='privateParameter'>
        /// Whether to make this collection private. (Optional; default false).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Collection>> CreateNewCollectionWithHttpMessagesAsync(string title, string description = default(string), bool? privateParameter = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a collection
        /// </summary>
        /// <remarks>
        /// Retrieve a single collection. To view a user’s private collections,
        /// the read_collections scope is required.
        /// </remarks>
        /// <param name='id'>
        /// The collections’s ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Collection>> GetCollectionByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing collection
        /// </summary>
        /// <remarks>
        /// Update an existing collection belonging to the logged-in user. This
        /// requires the write_collections scope.
        /// </remarks>
        /// <param name='id'>
        /// The collection’s ID.
        /// </param>
        /// <param name='title'>
        /// The title of the collection. (Optional.)
        /// </param>
        /// <param name='description'>
        /// The collection’s description. (Optional.)
        /// </param>
        /// <param name='privateParameter'>
        /// Whether to make this collection private. (Optional.)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Collection>> UpdateCollectionWithHttpMessagesAsync(string id, string title = default(string), string description = default(string), bool? privateParameter = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a collection
        /// </summary>
        /// <remarks>
        /// Delete a collection belonging to the logged-in user. This requires
        /// the write_collections scope.
        /// </remarks>
        /// <param name='id'>
        /// The collection’s ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteCollectionByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a collection’s photos
        /// </summary>
        /// <remarks>
        /// Retrieve a collection’s photos.
        /// </remarks>
        /// <param name='id'>
        /// The collection’s ID.
        /// </param>
        /// <param name='page'>
        /// Page number to retrieve. (Optional, default: 1)
        /// </param>
        /// <param name='perPage'>
        /// Number of items per page. (Optional; default: 10)
        /// </param>
        /// <param name='orientation'>
        /// Filter by photo orientation. Optional. (Valid values: landscape,
        /// portrait, squarish)
        /// . Possible values include: 'landscape', 'portrait', 'squarish'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Photo>>> GetCollectionPhotosWithHttpMessagesAsync(string id, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List a collection’s related collections
        /// </summary>
        /// <remarks>
        /// Retrieve a list of collections related to this one.
        /// </remarks>
        /// <param name='id'>
        /// The collection’s ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Collection>>> GetRelatedCollectionsWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a photo to a collection
        /// </summary>
        /// <remarks>
        /// Add a photo to one of the logged-in user’s collections. Requires
        /// the write_collections scope. If the photo is already in the
        /// collection, this action has no effect.
        /// </remarks>
        /// <param name='collectionId'>
        /// The collection’s ID.
        /// </param>
        /// <param name='photoId'>
        /// The photo's ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<OperationResponse>> AddPhotoToCollectionWithHttpMessagesAsync(string collectionId, string photoId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a photo from a collection
        /// </summary>
        /// <remarks>
        /// Remove a photo from one of the logged-in user’s collections.
        /// Requires the write_collections scope.
        /// </remarks>
        /// <param name='collectionId'>
        /// The collection’s ID.
        /// </param>
        /// <param name='photoId'>
        /// The photo's ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<OperationResponse>> RemovePhotoFromCollectionWithHttpMessagesAsync(string collectionId, string photoId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a topic’s photos
        /// </summary>
        /// <remarks>
        /// Retrieve a topic’s photos.
        /// </remarks>
        /// <param name='idOrSlug'>
        /// The topics’s ID or slug.
        /// </param>
        /// <param name='page'>
        /// Page number to retrieve. (Optional, default: 1)
        /// </param>
        /// <param name='perPage'>
        /// Number of items per page. (Optional; default: 10)
        /// </param>
        /// <param name='orientation'>
        /// Filter by photo orientation. (Optional; Valid values: landscape,
        /// portrait, squarish)
        /// . Possible values include: 'landscape', 'portrait', 'squarish'
        /// </param>
        /// <param name='orderBy'>
        /// How to sort the photos. Optional. (Valid values: latest, oldest,
        /// popular; default: latest)
        /// . Possible values include: 'latest', 'oldest', 'popular'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Photo>>> GetTopicPhotosWithHttpMessagesAsync(string idOrSlug, int? page = default(int?), int? perPage = default(int?), Orientation? orientation = default(Orientation?), OrderBy? orderBy = default(OrderBy?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
