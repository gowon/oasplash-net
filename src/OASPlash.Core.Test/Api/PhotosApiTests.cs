/*
 * Unsplash API
 *
 * This document describes the resources that make up the official Unsplash JSON API. 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using OASPlash.Core.Client;
using OASPlash.Core.Api;
// uncomment below to import models
//using OASPlash.Core.Model;

namespace OASPlash.Core.Test.Api
{
    /// <summary>
    ///  Class for testing PhotosApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PhotosApiTests : IDisposable
    {
        private PhotosApi instance;

        public PhotosApiTests()
        {
            instance = new PhotosApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PhotosApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PhotosApi
            //Assert.IsType<PhotosApi>(instance);
        }

        /// <summary>
        /// Test GetPhotoById
        /// </summary>
        [Fact]
        public void GetPhotoByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetPhotoById(id);
            //Assert.IsType<Photo>(response);
        }

        /// <summary>
        /// Test GetPhotoStatistics
        /// </summary>
        [Fact]
        public void GetPhotoStatisticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //StatResolution? resolution = null;
            //int? quantity = null;
            //var response = instance.GetPhotoStatistics(id, resolution, quantity);
            //Assert.IsType<PhotoStatistics>(response);
        }

        /// <summary>
        /// Test GetPhotos
        /// </summary>
        [Fact]
        public void GetPhotosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //OrderBy? orderBy = null;
            //var response = instance.GetPhotos(page, perPage, orderBy);
            //Assert.IsType<List<Photo>>(response);
        }

        /// <summary>
        /// Test GetRandomPhoto
        /// </summary>
        [Fact]
        public void GetRandomPhotoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string collections = null;
            //bool? featured = null;
            //string username = null;
            //string query = null;
            //Orientation? orientation = null;
            //ContentFilter? contentFilter = null;
            //int? count = null;
            //var response = instance.GetRandomPhoto(collections, featured, username, query, orientation, contentFilter, count);
            //Assert.IsType<OneOfPhotoarray>(response);
        }

        /// <summary>
        /// Test LikePhoto
        /// </summary>
        [Fact]
        public void LikePhotoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.LikePhoto(id);
            //Assert.IsType<Photo>(response);
        }

        /// <summary>
        /// Test TrackPhotoDownload
        /// </summary>
        [Fact]
        public void TrackPhotoDownloadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TrackPhotoDownload(id);
            //Assert.IsType<Photo>(response);
        }

        /// <summary>
        /// Test UnlikePhoto
        /// </summary>
        [Fact]
        public void UnlikePhotoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.UnlikePhoto(id);
            //Assert.IsType<Photo>(response);
        }

        /// <summary>
        /// Test UpdatePhoto
        /// </summary>
        [Fact]
        public void UpdatePhotoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string description = null;
            //bool? showOnProfile = null;
            //string tags = null;
            //double? locationLatitude = null;
            //double? locationLongitude = null;
            //string locationName = null;
            //string locationCity = null;
            //string locationCountry = null;
            //string exifMake = null;
            //string exifModel = null;
            //string exifExposureTime = null;
            //string exifApertureValue = null;
            //string exifFocalLength = null;
            //string exifIsoSpeedRatings = null;
            //var response = instance.UpdatePhoto(id, description, showOnProfile, tags, locationLatitude, locationLongitude, locationName, locationCity, locationCountry, exifMake, exifModel, exifExposureTime, exifApertureValue, exifFocalLength, exifIsoSpeedRatings);
            //Assert.IsType<Photo>(response);
        }
    }
}
