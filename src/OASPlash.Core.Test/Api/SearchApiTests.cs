/*
 * Unsplash API
 *
 * This document describes the resources that make up the official Unsplash JSON API. 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using OASPlash.Core.Client;
using OASPlash.Core.Api;
// uncomment below to import models
//using OASPlash.Core.Model;

namespace OASPlash.Core.Test.Api
{
    /// <summary>
    ///  Class for testing SearchApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SearchApiTests : IDisposable
    {
        private SearchApi instance;

        public SearchApiTests()
        {
            instance = new SearchApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SearchApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SearchApi
            //Assert.IsType<SearchApi>(instance);
        }

        /// <summary>
        /// Test SearchCollections
        /// </summary>
        [Fact]
        public void SearchCollectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.SearchCollections(query, page, perPage);
            //Assert.IsType<CollectionSearchResults>(response);
        }

        /// <summary>
        /// Test SearchPhotos
        /// </summary>
        [Fact]
        public void SearchPhotosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //int? page = null;
            //int? perPage = null;
            //OrderBy? orderBy = null;
            //string collections = null;
            //ContentFilter? contentFilter = null;
            //Color? color = null;
            //Orientation? orientation = null;
            //var response = instance.SearchPhotos(query, page, perPage, orderBy, collections, contentFilter, color, orientation);
            //Assert.IsType<PhotoSearchResults>(response);
        }

        /// <summary>
        /// Test SearchUsers
        /// </summary>
        [Fact]
        public void SearchUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.SearchUsers(query, page, perPage);
            //Assert.IsType<UserSearchResults>(response);
        }
    }
}
